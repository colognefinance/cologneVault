package contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class MedleyDAO extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50604051612879380380612879833981810160405260a081101561003357600080fd5b508051602082015160408301516060840151608090940151600280546001600160a01b03199081166001600160a01b039687161790915560038054821694861694909417909355600480548416928516929092179091556005805483169484169490941790935560068054909116919092161790556127c2806100b76000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c698a1da1161005b578063c698a1da14610136578063c8593d121461013e578063cd26be1c14610146578063f97c6e111461014e5761007d565b806350cc258e1461008257806350d23c70146100da57806377701eb01461012e575b600080fd5b61008a61017c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100c65781810151838201526020016100ae565b505050509050019250505060405180910390f35b610112600480360360808110156100f057600080fd5b506001600160a01b0381351690602081013590604081013590606001356101de565b604080516001600160a01b039092168252519081900360200190f35b61011261047a565b610112610489565b610112610498565b6101126104a7565b61017a6004803603604081101561016457600080fd5b506001600160a01b0381351690602001356104b6565b005b606060008054806020026020016040519081016040528092919081815260200182805480156101d457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116101b6575b5050505050905090565b6000803385878686600660009054906101000a90046001600160a01b03166040516102089061058b565b6001600160a01b039687168152602081019590955292851660408086019190915260608501929092526080840152921660a082015290519081900360c001906000f08015801561025c573d6000803e3d6000fd5b50604080516323b872dd60e01b81523360048201526001600160a01b0380841660248301526044820188905291519293508892918316916323b872dd916064808201926020929091908290030181600087803b1580156102bb57600080fd5b505af11580156102cf573d6000803e3d6000fd5b505050506040513d60208110156102e557600080fd5b50516103225760405162461bcd60e51b815260040180806020018281038252602e81526020018061275f602e913960400191505060405180910390fd5b600254604080516323b872dd60e01b81523360048201526001600160a01b038581166024830152604482018a9052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b505050506040513d60208110156103a857600080fd5b50516103e55760405162461bcd60e51b815260040180806020018281038252602e815260200180612731602e913960400191505060405180910390fd5b60008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b03861690811790915580835260208290526040808420805460ff1916909317909255905133927f9990404fa50cbe447253514fc4ab52bb578ae0b3514a50714660a1e801a2f6d391a35095945050505050565b6003546001600160a01b031690565b6004546001600160a01b031690565b6002546001600160a01b031690565b6005546001600160a01b031690565b3360009081526001602052604090205460ff1661051a576040805162461bcd60e51b815260206004820152601760248201527f4f6e6c79207661756c742063616e206d696e7420454155000000000000000000604482015290519081900360640190fd5b600354604080516340c10f1960e01b81526001600160a01b03858116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b15801561056f57600080fd5b505af1158015610583573d6000803e3d6000fd5b505050505050565b612198806105998339019056fe6080604052600060078190556009819055600a819055600c55600d805460ff191690553480156200002f57600080fd5b506040516200219838038062002198833981810160405260c08110156200005557600080fd5b50805160208201516040808401516060850151608086015160a090960151600080546001600160a01b0319166001600160a01b038089169190911780835595519798969794969395939492938993911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319163317908190556040805163077701eb60e41b815290516001600160a01b0392909216916377701eb091600480820192602092909190829003018186803b1580156200012557600080fd5b505afa1580156200013a573d6000803e3d6000fd5b505050506040513d60208110156200015157600080fd5b5051600380546001600160a01b0319166001600160a01b039283161790556002546040805163642c9e8960e11b81529051919092169163c8593d12916004808301926020929190829003018186803b158015620001ad57600080fd5b505afa158015620001c2573d6000803e3d6000fd5b505050506040513d6020811015620001d957600080fd5b5051600480546001600160a01b03199081166001600160a01b039384161782556005805490911687841617905560068590556007849055600d8054610100600160a81b0319166101008585168102919091179182905560408051632abf68dd60e11b81529051919092049093169263557ed1ba92828101926020929190829003018186803b1580156200026b57600080fd5b505afa15801562000280573d6000803e3d6000fd5b505050506040513d60208110156200029757600080fd5b5051600b55620002a785620002b3565b505050505050620002be565b600880549091019055565b611eca80620002ce6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063c5ebeaec11610066578063c5ebeaec146101ea578063f2fde38b14610207578063f7376f0c1461022d578063f78be85a14610235576100f5565b80638da5cb5b1461019a5780638f32d59b146101be57806398d5fdca146101da578063a69bdf16146101e2576100f5565b806343d726d6116100d357806343d726d614610129578063486501c51461013157806359a87bc114610160578063715018a614610192576100f5565b80631865c57d146100fa578063243582ff146101045780632da25de314610121575b600080fd5b61010261023d565b005b6101026004803603602081101561011a57600080fd5b503561023f565b610102610541565b61010261058b565b61014e6004803603602081101561014757600080fd5b503561098b565b60408051918252519081900360200190f35b6101026004803603606081101561017657600080fd5b50803590602081013590604001356001600160a01b03166109fc565b610102610c82565b6101a2610cdd565b604080516001600160a01b039092168252519081900360200190f35b6101c6610ced565b604080519115158252519081900360200190f35b61014e610cfe565b61014e610d89565b6101026004803603602081101561020057600080fd5b5035610ddd565b6101026004803603602081101561021d57600080fd5b50356001600160a01b0316610f9f565b61014e610fb9565b61014e611123565b565b600d5460ff1615610289576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600354604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156102e357600080fd5b505af11580156102f7573d6000803e3d6000fd5b505050506040513d602081101561030d57600080fd5b5051610360576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616e6e6f74207472616e73666572204541552e0000000000604482015290519081900360640190fd5b6103e5600182600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d60208110156103de57600080fd5b505161053c565b600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043357600080fd5b505afa158015610447573d6000803e3d6000fd5b505050506040513d602081101561045d57600080fd5b5051600b55600061046d8261120a565b9050600060095482111561048f5750600980546000909155908190039061049b565b50600980548290039055805b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b50505050610522600461051c60075460065461183e90919063ffffffff16565b906118a0565b600a54600954610531916118e2565b1161053c576000600c555b505050565b600d5460ff161561023d576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b610593610ced565b61059c57600080fd5b61061e600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ed57600080fd5b505afa158015610601573d6000803e3d6000fd5b505050506040513d602081101561061757600080fd5b505161098b565b1561065a5760405162461bcd60e51b8152600401808060200182810382526037815260200180611d676037913960400191505060405180910390fd5b6005546001600160a01b031663a9059cbb610673610cdd565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156106be57600080fd5b505afa1580156106d2573d6000803e3d6000fd5b505050506040513d60208110156106e857600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561073957600080fd5b505af115801561074d573d6000803e3d6000fd5b505050506040513d602081101561076357600080fd5b50506004546001600160a01b031663a9059cbb61077e610cdd565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156107ca57600080fd5b505afa1580156107de573d6000803e3d6000fd5b505050506040513d60208110156107f457600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d602081101561086f57600080fd5b50506003546001600160a01b031663a9059cbb61088a610cdd565b600354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156108d557600080fd5b505afa1580156108e9573d6000803e3d6000fd5b505050506040513d60208110156108ff57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561095057600080fd5b505af1158015610964573d6000803e3d6000fd5b505050506040513d602081101561097a57600080fd5b5050600d805460ff19166001179055565b600d5460009060ff16156109d8576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b60006109e38361193c565b50506009549091506109f590826118e2565b9392505050565b600d5460ff1615610a46576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610a9157600080fd5b505afa158015610aa5573d6000803e3d6000fd5b505050506040513d6020811015610abb57600080fd5b5051831115610afb5760405162461bcd60e51b8152600401808060200182810382526027815260200180611e6e6027913960400191505060405180910390fd5b6000610b05610cfe565b905082811115610b5c576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a3a62757928293a20507269636520746f6f206c6f770000000000604482015290519081900360640190fd5b838102610b688161023f565b6005546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015610bbe57600080fd5b505af1158015610bd2573d6000803e3d6000fd5b505050506040513d6020811015610be857600080fd5b5051610c3b576040805162461bcd60e51b815260206004820181905260248201527f5661756c743a3a6275793a2063616e6e6f74207472616e73666572204541552e604482015290519081900360640190fd5b6040805186815290516001600160a01b0385169184917f9d995b79e708615dc7201d66ebdcb94d773fe76aac960305383a8b4f8dda9f059181900360200190a35050505050565b610c8a610ced565b610c9357600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b6000610d82600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d6020811015610d7b57600080fd5b505161193c565b5091505090565b600d5460009060ff1615610dd6576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b5060095490565b600d5460ff1615610e27576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b610e2f610ced565b610e3857600080fd5b610e40611123565b811115610e94576040805162461bcd60e51b815260206004820152601a60248201527f437265646974206c696d69742069732065786861757374656420000000000000604482015290519081900360640190fd5b6002546001600160a01b031663f97c6e11610ead610cdd565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015610ef457600080fd5b505af1158015610f08573d6000803e3d6000fd5b505060098054840190555050600d5460408051632abf68dd60e11b815290516101009092046001600160a01b03169163557ed1ba91600480820192602092909190829003018186803b158015610f5d57600080fd5b505afa158015610f71573d6000803e3d6000fd5b505050506040513d6020811015610f8757600080fd5b5051600b819055610f9c90600290839061053c565b50565b610fa7610ced565b610fb057600080fd5b610f9c81611a4b565b6002546040805163634c50ed60e11b815290516000926001600160a01b03169163c698a1da916004808301926020929190829003018186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d602081101561102857600080fd5b50516002546040805163642c9e8960e11b815290516001600160a01b0393841693633ddac95393169163c8593d12916004808301926020929190829003018186803b15801561107657600080fd5b505afa15801561108a573d6000803e3d6000fd5b505050506040513d60208110156110a057600080fd5b5051600854604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b1580156110f257600080fd5b505afa158015611106573d6000803e3d6000fd5b505050506040513d602081101561111c57600080fd5b5051905090565b600d5460009060ff1615611170576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b60006111c3600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ed57600080fd5b905060006111e3600461051c60075460065461183e90919063ffffffff16565b90508181116111f757600092505050610cea565b6112018183611ab9565b92505050610cea565b600080600080611261600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5157600080fd5b60078290558796509194509250905060008385111561128b57506000600a55928290039282611296565b50838303600a556000935b60006112a38260026118a0565b905060006113b1600a61051c6009600260009054906101000a90046001600160a01b03166001600160a01b031663c698a1da6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ff57600080fd5b505afa158015611313573d6000803e3d6000fd5b505050506040513d602081101561132957600080fd5b505160035460408051633ddac95360e01b81526001600160a01b039283166004820152602481018a905290519190921691633ddac953916044808301926020929190829003018186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d60208110156113a957600080fd5b50519061183e565b604080516002808252606080830184529394509091602083019080368337505060035482519293506001600160a01b0316918391506000906113ef57fe5b6001600160a01b03928316602091820292909201015260045482519116908290600190811061141a57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148a57600080fd5b505afa15801561149e573d6000803e3d6000fd5b505050506040513d60208110156114b457600080fd5b505160025460408051633349af8760e21b8152905161271090930193506060926001600160a01b039092169163cd26be1c91600480820192602092909190829003018186803b15801561150657600080fd5b505afa15801561151a573d6000803e3d6000fd5b505050506040513d602081101561153057600080fd5b50516040516338ed173960e01b8152600481018781526024820187905230606483018190526084830186905260a060448401908152875160a485015287516001600160a01b03909516946338ed1739948b948b948b9490938b9360c401906020878101910280838360005b838110156115b357818101518382015260200161159b565b505050509050019650505050505050600060405180830381600087803b1580156115dc57600080fd5b505af11580156115f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561161957600080fd5b810190808051604051939291908464010000000082111561163957600080fd5b90830190602082018581111561164e57600080fd5b825186602082028301116401000000008211171561166b57600080fd5b82525081516020918201928201910280838360005b83811015611698578181015183820152602001611680565b5050505090500160405250505090506000816001815181106116b657fe5b60200260200101519050816000815181106116cd57fe5b602002602001015186146117125760405162461bcd60e51b8152600401808060200182810382526039815260200180611e356039913960400191505060405180910390fd5b808510156117515760405162461bcd60e51b8152600401808060200182810382526032815260200180611e036032913960400191505060405180910390fd5b6004805460408051630852cd8d60e31b8152928301849052516001600160a01b03909116916342966c6891602480830192600092919082900301818387803b15801561179c57600080fd5b505af11580156117b0573d6000803e3d6000fd5b5050600354604080516391c05b0b60e01b81528a8c03600482015290516001600160a01b0390921693506391c05b0b92506024808201926020929091908290030181600087803b15801561180357600080fd5b505af1158015611817573d6000803e3d6000fd5b505050506040513d602081101561182d57600080fd5b505050505050505050505050919050565b60008261184d5750600061189a565b8282028284828161185a57fe5b04146118975760405162461bcd60e51b8152600401808060200182810382526021815260200180611d9e6021913960400191505060405180910390fd5b90505b92915050565b600061189783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611afb565b600082820183811015611897576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000806000600b54841015611998576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f742063616c63756c6174652066656520696e207468652070617374604482015290519081900360640190fd5b6201518060006119ad620186a061016d6118a0565b9050600c5492506119bd83611b9d565b600a54600b549096509094505b86811015611a415760006119ee600461051c8860065461183e90919063ffffffff16565b905080611a06886009546118e290919063ffffffff16565b1115611a215784611a15578194505b611a1e85611b9d565b95505b620f42408388600954010281611a3357fe5b0496909601955082016119ca565b5050509193909250565b6001600160a01b038116611a5e57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061189783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611d0c565b60008183611b875760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611b4c578181015183820152602001611b34565b50505050905090810190601f168015611b795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581611b9357fe5b0495945050505050565b6007546107088215611d065782600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bf857600080fd5b505afa158015611c0c573d6000803e3d6000fd5b505050506040513d6020811015611c2257600080fd5b50511015611c615760405162461bcd60e51b8152600401808060200182810382526044815260200180611dbf6044913960600191505060405180910390fd5b6000611ceb8261051c86600d60019054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb957600080fd5b505afa158015611ccd573d6000803e3d6000fd5b505050506040513d6020811015611ce357600080fd5b505190611ab9565b606590069050611d02606461051c8584830361183e565b9250505b50919050565b60008184841115611d5e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611b4c578181015183820152602001611b34565b50505090039056fe5661756c743a3a636c6f736528293a20636c6f736520616c6c6f776564206f6e6c792069662064656274206973207061796564206f6666536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c743a3a676574507269636528293a20496e636f72726563742073746174653a204c696d697420697320627265616368656420696e2074686520667574757265215661756c743a3a7061794f666628293a204d444c5920626f75676874206973206c657373207468616e2065787065637465645661756c743a3a7061794f666628293a206e6f7420657861637420616d6f756e74206f662045415520736f6c6420746f20627579204d444c595661756c743a3a62757928293a204e6f7420656e6f75676820746f6b656e7320746f2073656c6ca2646970667358221220337002739da49a4a5d87d22223639b2f531a67c741c4a30a32c27563221af29264736f6c634300070000334d65646c657944414f3a205472616e73666572206f66204d444c5920746f6b656e73206e6f7420616c6c6f7765644d65646c657944414f3a205472616e73666572206f66207573657220746f6b656e73206e6f7420616c6c6f776564a264697066735822122078d09e5a0154b409d8f9dcec2e2ea24930fc568ca3e5387e69334ba1a9b9a59c64736f6c63430007000033";

    public static final String FUNC_CREATEVAULT = "createVault";

    public static final String FUNC_GETEAUTOKENADDRESS = "getEauTokenAddress";

    public static final String FUNC_GETMDLYMARKET = "getMdlyMarket";

    public static final String FUNC_GETMDLYPRICEORACLE = "getMdlyPriceOracle";

    public static final String FUNC_GETMDLYTOKENADDRESS = "getMdlyTokenAddress";

    public static final String FUNC_LISTVAULTS = "listVaults";

    public static final String FUNC_MINTEAU = "mintEAU";

    public static final Event VAULTCREATION_EVENT = new Event("VaultCreation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MedleyDAO(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MedleyDAO(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MedleyDAO(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MedleyDAO(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<VaultCreationEventResponse> getVaultCreationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VAULTCREATION_EVENT, transactionReceipt);
        ArrayList<VaultCreationEventResponse> responses = new ArrayList<VaultCreationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VaultCreationEventResponse typedResponse = new VaultCreationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.vault = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VaultCreationEventResponse> vaultCreationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VaultCreationEventResponse>() {
            @Override
            public VaultCreationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VAULTCREATION_EVENT, log);
                VaultCreationEventResponse typedResponse = new VaultCreationEventResponse();
                typedResponse.log = log;
                typedResponse.vault = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VaultCreationEventResponse> vaultCreationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VAULTCREATION_EVENT));
        return vaultCreationEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createVault(String token, BigInteger stake, BigInteger initialAmount, BigInteger tokenPrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEVAULT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(stake), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getEauTokenAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEAUTOKENADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getMdlyMarket() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMDLYMARKET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getMdlyPriceOracle() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMDLYPRICEORACLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getMdlyTokenAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMDLYTOKENADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> listVaults() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LISTVAULTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> mintEAU(String beneficiary, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTEAU, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, beneficiary), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MedleyDAO load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedleyDAO(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MedleyDAO load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MedleyDAO(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MedleyDAO load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MedleyDAO(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MedleyDAO load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MedleyDAO(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MedleyDAO> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String mdlyToken, String eauToken, String mdlyPriceOracle, String mdlyMarket, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, mdlyToken), 
                new org.web3j.abi.datatypes.Address(160, eauToken), 
                new org.web3j.abi.datatypes.Address(160, mdlyPriceOracle), 
                new org.web3j.abi.datatypes.Address(160, mdlyMarket), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(MedleyDAO.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MedleyDAO> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String mdlyToken, String eauToken, String mdlyPriceOracle, String mdlyMarket, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, mdlyToken), 
                new org.web3j.abi.datatypes.Address(160, eauToken), 
                new org.web3j.abi.datatypes.Address(160, mdlyPriceOracle), 
                new org.web3j.abi.datatypes.Address(160, mdlyMarket), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(MedleyDAO.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MedleyDAO> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String mdlyToken, String eauToken, String mdlyPriceOracle, String mdlyMarket, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, mdlyToken), 
                new org.web3j.abi.datatypes.Address(160, eauToken), 
                new org.web3j.abi.datatypes.Address(160, mdlyPriceOracle), 
                new org.web3j.abi.datatypes.Address(160, mdlyMarket), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(MedleyDAO.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MedleyDAO> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String mdlyToken, String eauToken, String mdlyPriceOracle, String mdlyMarket, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, mdlyToken), 
                new org.web3j.abi.datatypes.Address(160, eauToken), 
                new org.web3j.abi.datatypes.Address(160, mdlyPriceOracle), 
                new org.web3j.abi.datatypes.Address(160, mdlyMarket), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(MedleyDAO.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class VaultCreationEventResponse extends BaseEventResponse {
        public String vault;

        public String owner;
    }
}
