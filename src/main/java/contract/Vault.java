package contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Vault extends Contract {

    public static final String BINARY = "6080604052600060078190556009819055600a819055600c819055600e819055600f805461ffff60a01b19169055601180546001600160a01b03191690556012553480156200004d57600080fd5b50604051620050bd380380620050bd833981810160405260a08110156200007357600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b0319166001600160a01b03808816919091178083559451969795969395949293889390911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319163317908190556040805163077701eb60e41b815290516001600160a01b0392909216916377701eb091600480820192602092909190829003018186803b1580156200013c57600080fd5b505afa15801562000151573d6000803e3d6000fd5b505050506040513d60208110156200016857600080fd5b5051600380546001600160a01b0319166001600160a01b03928316179055600254604080516306a0241960e31b81529051919092169163350120c8916004808301926020929190829003018186803b158015620001c457600080fd5b505afa158015620001d9573d6000803e3d6000fd5b505050506040513d6020811015620001f057600080fd5b5051600480546001600160a01b03199081166001600160a01b0393841617825560058054821688851617905560068690556007859055600d8054909116848416179081905560408051632abf68dd60e11b81529051919093169263557ed1ba9281810192602092909190829003018186803b1580156200026f57600080fd5b505afa15801562000284573d6000803e3d6000fd5b505050506040513d60208110156200029b57600080fd5b5051600b555050505050614e0880620002b56000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063a694fc3a11610097578063db8d55f111610071578063db8d55f1146103c7578063f2fde38b146103cf578063f7376f0c146103f5578063f78be85a146103fd576101a9565b8063a694fc3a14610385578063a69bdf16146103a2578063c5ebeaec146103aa576101a9565b80638da5cb5b116100d35780638da5cb5b146103495780638f32d59b1461036d57806398d5fdca146103755780639b434cf11461037d576101a9565b8063715018a61461030e57806375f91ec814610316578063862acd921461031e576101a9565b8063421715c21161016657806353427b1a1161014057806353427b1a1461028d578063540968b9146102cc57806359a87bc1146102d45780635acc433714610306576101a9565b8063421715c21461025757806343d726d61461025f5780634da90ff214610267576101a9565b80631865c57d146101ae57806321adeed6146101d7578063243582ff146101f35780632da25de3146102125780632e4148901461021a57806334ce998a1461023d575b600080fd5b6101b6610405565b604051808260078111156101c657fe5b815260200191505060405180910390f35b6101df610518565b604080519115158252519081900360200190f35b6102106004803603602081101561020957600080fd5b50356105fb565b005b6102106106ab565b6102106004803603604081101561023057600080fd5b5080359060200135610f99565b610245611231565b60408051918252519081900360200190f35b6102456112cb565b6102106113a5565b6102456004803603602081101561027d57600080fd5b50356001600160a01b03166117ac565b6102b3600480360360208110156102a357600080fd5b50356001600160a01b03166117fc565b6040805192835260208301919091528051918290030190f35b6102b361186b565b610210600480360360608110156102ea57600080fd5b50803590602081013590604001356001600160a01b0316611999565b610210611a4d565b61021061206c565b6102456120fd565b610326612103565b604080516001600160a01b03909316835260208301919091528051918290030190f35b610351612122565b604080516001600160a01b039092168252519081900360200190f35b6101df612131565b610245612142565b61021061216f565b6102106004803603602081101561039b57600080fd5b5035612416565b610245612470565b610210600480360360208110156103c057600080fd5b50356124cb565b610245612715565b610210600480360360208110156103e557600080fd5b50356001600160a01b03166127e0565b610245612830565b61024561292b565b600f54600090600160a81b900460ff161561042257506006610515565b600f54600160a01b900460ff168015610441575061043e611231565b15155b1561044e57506004610515565b600f54600160a01b900460ff161561046857506005610515565b60065415806104ac57506011546001600160a01b0316158015906104ac57506011546001600160a01b03166000908152601060205260409020546104aa612142565b145b156104b957506007610515565b6104c161294c565b156104ce57506003610515565b6104d6610518565b80156104e35750600e5415155b156104f057506002610515565b6104f8610518565b80156105045750600e54155b1561051157506001610515565b5060005b90565b600f54600090600160a81b900460ff161561056c576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600d5460408051632abf68dd60e11b815290516105e3926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d60208110156105dc57600080fd5b50516129db565b158015906105f657506105f46112cb565b155b905090565b600f54600160a81b900460ff161561064c576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600f54600160a01b900460ff161561069e576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6106a83382612a4a565b50565b600f54600160a81b900460ff16156106fc576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600f54600160a01b900460ff161561074e576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b61075661294c565b6107915760405162461bcd60e51b815260040180806020018281038252602a815260200180614d58602a913960400191505060405180910390fd5b600061079b611231565b604080516002808252606080830184529394509091602083019080368337505060045482519293506001600160a01b0316918391506000906107d957fe5b6001600160a01b03928316602091820292909201015260035482519116908290600190811061080457fe5b6001600160a01b039283166020918202929092018101919091526002546040805163824150d560e01b81529051606094929092169263824150d592600480840193829003018186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d602081101561088357600080fd5b5051604080516307c0329d60e21b815260048101868152602482019283528551604483015285516001600160a01b0390941693631f00ca749388938893926064909101906020858101910280838360005b838110156108ec5781810151838201526020016108d4565b50505050905001935050505060006040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561094d57600080fd5b8101908080516040519392919084600160201b82111561096c57600080fd5b90830190602082018581111561098157600080fd5b82518660208202830111600160201b8211171561099d57600080fd5b82525081516020918201928201910280838360005b838110156109ca5781810151838201526020016109b2565b5050505090500160405250505090506000816000815181106109e857fe5b60200260200101519050600854811115610a0157506008545b6000610a0e82600a612de1565b90506000610a1d826004612de1565b60048054600f546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b505050506040513d6020811015610aa357600080fd5b5051610ae05760405162461bcd60e51b815260040180806020018281038252602a815260200180614a21602a913960400191505060405180910390fd5b600480546040805163a9059cbb60e01b8152339381019390935260248301849052516001600160a01b039091169163a9059cbb9160448083019260209291908290030181600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b505050506040513d6020811015610b5f57600080fd5b5051610b9c5760405162461bcd60e51b81526004018080602001828103825260298152602001806148176029913960400191505060405180910390fd5b6004546001600160a01b03166342966c68610bc2610bbb846002612e2a565b8590612e83565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610bf857600080fd5b505af1158015610c0c573d6000803e3d6000fd5b505060088054859003908190558511159150610c2a90505760085492505b600260009054906101000a90046001600160a01b03166001600160a01b031663824150d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7857600080fd5b505afa158015610c8c573d6000803e3d6000fd5b505050506040513d6020811015610ca257600080fd5b50516040805163d06ca61f60e01b815260048101868152602482019283528851604483015288516001600160a01b039094169363d06ca61f9388938b93926064909101906020858101910280838360005b83811015610d0b578181015183820152602001610cf3565b50505050905001935050505060006040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d6c57600080fd5b8101908080516040519392919084600160201b821115610d8b57600080fd5b908301906020820185811115610da057600080fd5b82518660208202830111600160201b82111715610dbc57600080fd5b82525081516020918201928201910280838360005b83811015610de9578181015183820152602001610dd1565b505050509050016040525050509350600084600181518110610e0757fe5b6020026020010151905086811115610e1c5750855b6000610e288583612ec5565b6008805487900390556009549091508110610eb95760035460095460408051630852cd8d60e31b81526004810192909252516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610e8d57600080fd5b505af1158015610ea1573d6000803e3d6000fd5b50505050600954810390506000600981905550610f2d565b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610f0657600080fd5b505af1158015610f1a573d6000803e3d6000fd5b5050600980549390930390925550600090505b600a54811115610f6e5760405162461bcd60e51b8152600401808060200182810382526028815260200180614d306028913960400191505060405180910390fd5b610f7781613346565b50506000600a555050600f805460ff60a01b1916600160a01b17905550505050565b600f54600160a01b900460ff16158015610fbd5750600f54600160a81b900460ff16155b8015610fce5750610fcc61294c565b155b61101f576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e697469616c2061756374696f6e206973206f7665720000604482015290519081900360640190fd5b6000611029612142565b9050826110675760405162461bcd60e51b815260040180806020018281038252602281526020018061489d6022913960400191505060405180910390fd5b8083106110bb576040805162461bcd60e51b815260206004820152601f60248201527f5661756c743a6368616c6c656e67653a20707269636520746f6f206869676800604482015290519081900360640190fd5b82600654028210156110fe5760405162461bcd60e51b815260040180806020018281038252602e815260200180614840602e913960400191505060405180910390fd5b600354604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561115857600080fd5b505af115801561116c573d6000803e3d6000fd5b505050506040513d602081101561118257600080fd5b50516111bf5760405162461bcd60e51b8152600401808060200182810382526025815260200180614a786025913960400191505060405180910390fd5b60128054830190556111cf6147b9565b50604080518082018252848152602080820185815233600090815260109092528382208351815590516001909101556011546001600160a01b03168152919091205484111561122b57601180546001600160a01b031916331790555b50505050565b600f54600090600160a81b900460ff1615611285576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600d5460408051632abf68dd60e11b815290516105f6926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105b257600080fd5b600f54600090600160a81b900460ff161561131f576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b6000611372600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b257600080fd5b9050600061137e61292b565b905081811161139257600092505050610515565b61139c8183612e83565b92505050610515565b6113ad612131565b6113ec576040805162461bcd60e51b815260206004820152601e60248201526000805160206148bf833981519152604482015290519081900360640190fd5b600d5460408051632abf68dd60e11b81529051611432926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105b257600080fd5b1561146e5760405162461bcd60e51b8152600401808060200182810382526036815260200180614b906036913960400191505060405180910390fd5b6005546001600160a01b031663a9059cbb611487612122565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156114d257600080fd5b505afa1580156114e6573d6000803e3d6000fd5b505050506040513d60208110156114fc57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d602081101561157757600080fd5b505060006006556004546001600160a01b031663a9059cbb611597612122565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156115e357600080fd5b505afa1580156115f7573d6000803e3d6000fd5b505050506040513d602081101561160d57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d602081101561168857600080fd5b50506003546001600160a01b031663a9059cbb6116a3612122565b601254600354604080516370a0823160e01b8152306004820152905161172593926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156116f357600080fd5b505afa158015611707573d6000803e3d6000fd5b505050506040513d602081101561171d57600080fd5b505190612e83565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561176b57600080fd5b505af115801561177f573d6000803e3d6000fd5b505050506040513d602081101561179557600080fd5b5050600f805460ff60a81b1916600160a81b179055565b6011546000906001600160a01b03838116911614156117f3576006546011546001600160a01b03166000908152601060205260409020546117ec91612e2a565b90506117f7565b5060005b919050565b6001600160a01b038082166000818152601060205260408120600101546011549093919291161415611866576000611832612142565b6001600160a01b0385166000908152601060205260409020546006548102909403939091508114156118645760065491505b505b915091565b600080611877336117fc565b909250905080156118b7573360008181526010602052604090205461189f9130918491613538565b336000908152601060205260408120600101556118d1565b336000908152601060205260409020600101805483900390555b6003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561192557600080fd5b505af1158015611939573d6000803e3d6000fd5b505050506040513d602081101561194f57600080fd5b505161198c5760405162461bcd60e51b815260040180806020018281038252602c815260200180614abe602c913960400191505060405180910390fd5b6012805483900390559091565b600f54600160a81b900460ff16156119ea576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600f54600160a01b900460ff1615611a3c576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b611a4833848484613538565b505050565b600f54600160a81b900460ff1615611a9e576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b611aa661294c565b611ae15760405162461bcd60e51b815260040180806020018281038252602a815260200180614d58602a913960400191505060405180910390fd5b600f54600160a01b900460ff16611b295760405162461bcd60e51b8152600401808060200182810382526032815260200180614c0a6032913960400191505060405180910390fd5b6000611b33611231565b905060008111611b745760405162461bcd60e51b815260040180806020018281038252602681526020018061495e6026913960400191505060405180910390fd5b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b158015611bb957600080fd5b505afa158015611bcd573d6000803e3d6000fd5b505050506040513d6020811015611be357600080fd5b505160048054604080516370a0823160e01b81523393810193909352516001600160a01b0393841693633ddac9539392169182916370a0823191602480820192602092909190829003018186803b158015611c3d57600080fd5b505afa158015611c51573d6000803e3d6000fd5b505050506040513d6020811015611c6757600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b158015611cb657600080fd5b505afa158015611cca573d6000803e3d6000fd5b505050506040513d6020811015611ce057600080fd5b50519050611cef826014612de1565b811015611d2d5760405162461bcd60e51b815260040180806020018281038252605c815260200180614b0d605c913960600191505060405180910390fd5b6000611d3a83600a612de1565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8c57600080fd5b505afa158015611da0573d6000803e3d6000fd5b505050506040513d6020811015611db657600080fd5b50516003546001600160a01b0391821691633ddac9539116611dd88786613d05565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015611e1c57600080fd5b505afa158015611e30573d6000803e3d6000fd5b505050506040513d6020811015611e4657600080fd5b5051600254604080516305c0584560e41b81523060048201526024810184905290519293506001600160a01b0390911691635c0584509160448082019260009290919082900301818387803b158015611e9e57600080fd5b505af1158015611eb2573d6000803e3d6000fd5b50505050611ed281611ecd8487613d0590919063ffffffff16565b612ec5565b5060035460408051630852cd8d60e31b81526004810187905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015611f2057600080fd5b505af1158015611f34573d6000803e3d6000fd5b505060006009555050600d5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b158015611f8257600080fd5b505afa158015611f96573d6000803e3d6000fd5b505050506040513d6020811015611fac57600080fd5b5051600b556003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561200557600080fd5b505af1158015612019573d6000803e3d6000fd5b505050506040513d602081101561202f57600080fd5b505161122b5760405162461bcd60e51b81526004018080602001828103825260348152602001806149ab6034913960400191505060405180910390fd5b612074612131565b6120b3576040805162461bcd60e51b815260206004820152601e60248201526000805160206148bf833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065490565b6011546001600160a01b03166000818152601060205260409020549091565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60006105f661214f613d5f565b6011546001600160a01b0316600090815260106020526040902054613ea1565b600f54600160a81b900460ff16156121c0576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600f54600160a01b900460ff1615612212576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b61221a610518565b6122555760405162461bcd60e51b81526004018080602001828103825260438152602001806147d46043913960600191505060405180910390fd5b600e54156122945760405162461bcd60e51b81526004018080602001828103825260428152602001806149df6042913960600191505060405180910390fd5b600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122e257600080fd5b505afa1580156122f6573d6000803e3d6000fd5b505050506040513d602081101561230c57600080fd5b5051600e55600f80546001600160a01b03191633179055600d5460408051632abf68dd60e11b8152905161239a926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b15801561236957600080fd5b505afa15801561237d573d6000803e3d6000fd5b505050506040513d602081101561239357600080fd5b5051613eb8565b600c55600a55600d5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d602081101561240f57600080fd5b5051600b55565b600f54600160a81b900460ff1615612467576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b6106a881613fcf565b600f54600090600160a81b900460ff16156124c4576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b5060095490565b600f54600160a81b900460ff161561251c576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600f54600160a01b900460ff161561256e576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b612576612131565b6125b5576040805162461bcd60e51b815260206004820152601e60248201526000805160206148bf833981519152604482015290519081900360640190fd5b6125bd6112cb565b811115612611576040805162461bcd60e51b815260206004820152601a60248201527f437265646974206c696d69742069732065786861757374656420000000000000604482015290519081900360640190fd5b6002546001600160a01b031663f97c6e1161262a612122565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561267157600080fd5b505af1158015612685573d6000803e3d6000fd5b505060098054840190555050600d5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d602081101561270057600080fd5b5051600b8190556106a8906001908390611a48565b600f54600090600160a81b900460ff1615612769576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600d5460408051632abf68dd60e11b815290516105f6926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156127af57600080fd5b505afa1580156127c3573d6000803e3d6000fd5b505050506040513d60208110156127d957600080fd5b505161409c565b6127e8612131565b612827576040805162461bcd60e51b815260206004820152601e60248201526000805160206148bf833981519152604482015290519081900360640190fd5b6106a881614100565b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b15801561287557600080fd5b505afa158015612889573d6000803e3d6000fd5b505050506040513d602081101561289f57600080fd5b50516004805460085460408051633ddac95360e01b81526001600160a01b0393841694810194909452602484019190915251921691633ddac95391604480820192602092909190829003018186803b1580156128fa57600080fd5b505afa15801561290e573d6000803e3d6000fd5b505050506040513d602081101561292457600080fd5b5051905090565b60006105f6600461294661293d612142565b60065490612e2a565b90612de1565b6000600e546000141580156105f65750600e54600d5460408051632abf68dd60e11b815290516202bf2093926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156129a757600080fd5b505afa1580156129bb573d6000803e3d6000fd5b505050506040513d60208110156129d157600080fd5b5051031015905090565b600f54600090600160a81b900460ff1615612a2f576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b612a44612a3b8361409c565b60095490613d05565b92915050565b6001600160a01b0382163014612b3157600354604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015612ab457600080fd5b505af1158015612ac8573d6000803e3d6000fd5b505050506040513d6020811015612ade57600080fd5b5051612b31576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616e6e6f74207472616e73666572204541552e0000000000604482015290519081900360640190fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612b7b57600080fd5b505afa158015612b8f573d6000803e3d6000fd5b505050506040513d6020811015612ba557600080fd5b50511015612be45760405162461bcd60e51b8152600401808060200182810382526027815260200180614b696027913960400191505060405180910390fd5b612c69600082600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3857600080fd5b505afa158015612c4c573d6000803e3d6000fd5b505050506040513d6020811015612c6257600080fd5b5051611a48565b600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612cb757600080fd5b505afa158015612ccb573d6000803e3d6000fd5b505050506040513d6020811015612ce157600080fd5b5051600b556000612cf18261416e565b90506000600954821115612d1357506009805460009091559081900390612d1f565b50600980548290039055805b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015612d6c57600080fd5b505af1158015612d80573d6000803e3d6000fd5b50505050612da06004612946600754600654612e2a90919063ffffffff16565b600a54600954612daf91613d05565b11612dbf576000600c819055600e555b6000612dc9612142565b90508060075414612dda5760078190555b5050505050565b6000612e2383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614208565b9392505050565b600082612e3957506000612a44565b82820282848281612e4657fe5b0414612e235760405162461bcd60e51b8152600401808060200182810382526021815260200180614a9d6021913960400191505060405180910390fd5b6000612e2383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506142aa565b600480546002546040805163824150d560e01b815290516000946001600160a01b039485169463095ea7b394169263824150d59281830192602092829003018186803b158015612f1457600080fd5b505afa158015612f28573d6000803e3d6000fd5b505050506040513d6020811015612f3e57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018790525160448083019260209291908290030181600087803b158015612f8e57600080fd5b505af1158015612fa2573d6000803e3d6000fd5b505050506040513d6020811015612fb857600080fd5b50506040805160028082526060808301845292602083019080368337505060045482519293506001600160a01b031691839150600090612ff457fe5b6001600160a01b03928316602091820292909201015260035482519116908290600190811061301f57fe5b6001600160a01b03928316602091820292909201810191909152600d5460408051632abf68dd60e11b81529051600094929092169263557ed1ba92600480840193829003018186803b15801561307457600080fd5b505afa158015613088573d6000803e3d6000fd5b505050506040513d602081101561309e57600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b1580156130f057600080fd5b505afa158015613104573d6000803e3d6000fd5b505050506040513d602081101561311a57600080fd5b5051604051634401edf760e11b8152600481018781526024820189905230606483018190526084830186905260a060448401908152875160a485015287516001600160a01b0390951694638803dbee948b948d948b9490938b9360c401906020878101910280838360005b8381101561319d578181015183820152602001613185565b505050509050019650505050505050600060405180830381600087803b1580156131c657600080fd5b505af11580156131da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561320357600080fd5b8101908080516040519392919084600160201b82111561322257600080fd5b90830190602082018581111561323757600080fd5b82518660208202830111600160201b8211171561325357600080fd5b82525081516020918201928201910280838360005b83811015613280578181015183820152602001613268565b50505050905001604052505050905060008160008151811061329e57fe5b60200260200101519050816001815181106132b557fe5b60200260200101519450868111156132fe5760405162461bcd60e51b815260040180806020018281038252603281526020018061492c6032913960400191505060405180910390fd5b85851461333c5760405162461bcd60e51b815260040180806020018281038252603a815260200180614c3c603a913960400191505060405180910390fd5b5050505092915050565b6000613353826002612de1565b6003546002546040805163824150d560e01b815290519394506001600160a01b039283169363095ea7b3939092169163824150d591600480820192602092909190829003018186803b1580156133a857600080fd5b505afa1580156133bc573d6000803e3d6000fd5b505050506040513d60208110156133d257600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b15801561342257600080fd5b505af1158015613436573d6000803e3d6000fd5b505050506040513d602081101561344c57600080fd5b506000905061345a82614304565b6004805460408051630852cd8d60e31b8152928301849052519293506001600160a01b0316916342966c689160248082019260009290919082900301818387803b1580156134a757600080fd5b505af11580156134bb573d6000803e3d6000fd5b5050600354604080516391c05b0b60e01b8152868803600482015290516001600160a01b0390921693506391c05b0b92506024808201926020929091908290030181600087803b15801561350e57600080fd5b505af1158015613522573d6000803e3d6000fd5b505050506040513d6020811015612dda57600080fd5b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561358357600080fd5b505afa158015613597573d6000803e3d6000fd5b505050506040513d60208110156135ad57600080fd5b50518311156135ed5760405162461bcd60e51b8152600401808060200182810382526027815260200180614d826027913960400191505060405180910390fd5b60006135f7612142565b9050600081116136385760405162461bcd60e51b815260040180806020018281038252602f81526020018061486e602f913960400191505060405180910390fd5b6011546001600160a01b031633148061366a57506011546001600160a01b031660009081526010602052604090205481115b6136a55760405162461bcd60e51b815260040180806020018281038252604d815260200180614c76604d913960600191505060405180910390fd5b828111156136fa576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a3a62757928293a20507269636520746f6f206c6f770000000000604482015290519081900360640190fd5b60006137068583612e2a565b9050600e54600014613bde57600061371f82600a612de1565b90506001600160a01b03871630146137f257600354604080516323b872dd60e01b81523360048201523060248201526044810184905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561378b57600080fd5b505af115801561379f573d6000803e3d6000fd5b505050506040513d60208110156137b557600080fd5b50516137f25760405162461bcd60e51b81526004018080602001828103825260288152602001806148df6028913960400191505060405180910390fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561383c57600080fd5b505afa158015613850573d6000803e3d6000fd5b505050506040513d602081101561386657600080fd5b505110156138a55760405162461bcd60e51b81526004018080602001828103825260258152602001806149076025913960400191505060405180910390fd5b6003546002546040805163824150d560e01b815290516001600160a01b039384169363095ea7b393169163824150d5916004808301926020929190829003018186803b1580156138f457600080fd5b505afa158015613908573d6000803e3d6000fd5b505050506040513d602081101561391e57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b15801561396e57600080fd5b505af1158015613982573d6000803e3d6000fd5b505050506040513d602081101561399857600080fd5b50600090506139a682614304565b905060006139ba6064612946846021612e2a565b60048054600f546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015613a1657600080fd5b505af1158015613a2a573d6000803e3d6000fd5b505050506040513d6020811015613a4057600080fd5b5051613a7d5760405162461bcd60e51b815260040180806020018281038252602d815260200180614a4b602d913960400191505060405180910390fd5b6000613a8f6064612946856021612e2a565b600480546040805163a9059cbb60e01b81526001600160a01b038c81169482019490945260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b158015613aea57600080fd5b505af1158015613afe573d6000803e3d6000fd5b505050506040513d6020811015613b1457600080fd5b5051613b515760405162461bcd60e51b815260040180806020018281038252602a815260200180614da9602a913960400191505060405180910390fd5b6004546001600160a01b03166342966c68613b7683613b708787612e83565b90612e83565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613bac57600080fd5b505af1158015613bc0573d6000803e3d6000fd5b50505050613bd78486612e8390919063ffffffff16565b9450505050505b613be88682612a4a565b6005546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015613c3e57600080fd5b505af1158015613c52573d6000803e3d6000fd5b505050506040513d6020811015613c6857600080fd5b5051613ca55760405162461bcd60e51b81526004018080602001828103825260278152602001806149846027913960400191505060405180910390fd5b6006805486900390556007548214613cbd5760078290555b6040805186815290516001600160a01b0385169184917f9d995b79e708615dc7201d66ebdcb94d773fe76aac960305383a8b4f8dda9f059181900360200190a3505050505050565b600082820183811015612e23576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600754600e546107089015613e9d57600e54600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015613dbf57600080fd5b505afa158015613dd3573d6000803e3d6000fd5b505050506040513d6020811015613de957600080fd5b50511015613e285760405162461bcd60e51b8152600401808060200182810382526044815260200180614bc66044913960600191505060405180910390fd5b6000613e8282612946600e54600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116f357600080fd5b606590069050613e99606461294685848303612e2a565b9250505b5090565b600081831015613eb15781612e23565b5090919050565b600080600b54831015613f12576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f742063616c63756c6174652066656520696e207468652070617374604482015290519081900360640190fd5b600e54839015801590613f26575083600e54105b15613f305750600e545b620151806000613f45620186a061016d612de1565b9050600c549350600a5494506000600b5490505b83811015613fc6576000613f7f6004612946600754600654612e2a90919063ffffffff16565b905080613f9788600954613d0590919063ffffffff16565b1115613fa65785613fa6578195505b620f42408388600954010281613fb857fe5b049690960195508201613f59565b50505050915091565b60048054604080516323b872dd60e01b8152339381019390935230602484015260448301849052516001600160a01b03909116916323b872dd9160648083019260209291908290030181600087803b15801561402a57600080fd5b505af115801561403e573d6000803e3d6000fd5b505050506040513d602081101561405457600080fd5b50516140915760405162461bcd60e51b8152600401808060200182810382526023815260200180614aea6023913960400191505060405180910390fd5b600880549091019055565b600f54600090600160a81b900460ff16156140f0576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b6140f982613eb8565b5092915050565b6001600160a01b03811661411357600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008060006141c4600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561236957600080fd5b600c81905585945090925090506000828411156141ec57506000600a559181900391816141f7565b50828203600a556000925b61420081613346565b505050919050565b600081836142945760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614259578181015183820152602001614241565b50505050905090810190601f1680156142865780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816142a057fe5b0495945050505050565b600081848411156142fc5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614259578181015183820152602001614241565b505050900390565b6040805160028082526060808301845260009390929190602083019080368337505060035482519293506001600160a01b03169183915060009061434457fe5b6001600160a01b03928316602091820292909201015260045482519116908290600190811061436f57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600061449b600a6129466009600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b1580156143e957600080fd5b505afa1580156143fd573d6000803e3d6000fd5b505050506040513d602081101561441357600080fd5b505160035460408051633ddac95360e01b81526001600160a01b039283166004820152602481018c905290519190921691633ddac953916044808301926020929190829003018186803b15801561446957600080fd5b505afa15801561447d573d6000803e3d6000fd5b505050506040513d602081101561449357600080fd5b505190612e2a565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156144ed57600080fd5b505afa158015614501573d6000803e3d6000fd5b505050506040513d602081101561451757600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b15801561456957600080fd5b505afa15801561457d573d6000803e3d6000fd5b505050506040513d602081101561459357600080fd5b50516040516338ed173960e01b8152600481018881526024820186905230606483018190526084830186905260a060448401908152885160a485015288516001600160a01b03909516946338ed1739948c948a948c9490938b9360c401906020878101910280838360005b838110156146165781810151838201526020016145fe565b505050509050019650505050505050600060405180830381600087803b15801561463f57600080fd5b505af1158015614653573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561467c57600080fd5b8101908080516040519392919084600160201b82111561469b57600080fd5b9083019060208201858111156146b057600080fd5b82518660208202830111600160201b821117156146cc57600080fd5b82525081516020918201928201910280838360005b838110156146f95781810151838201526020016146e1565b5050505090500160405250505090508060018151811061471557fe5b602002602001015194508060008151811061472c57fe5b602002602001015186146147715760405162461bcd60e51b815260040180806020018281038252603a815260200180614cc3603a913960400191505060405180910390fd5b848311156147b05760405162461bcd60e51b8152600401808060200182810382526033815260200180614cfd6033913960400191505060405180910390fd5b50505050919050565b60405180604001604052806000815260200160008152509056fe5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20637265646974206c696d6974206973206e6f742062726561636865645661756c743a3a736c61736828293a2070617920736c617368696e6720626f756e7479206572726f725661756c743a6368616c6c656e67653a206c6f636b20616d6f756e7420696e20454155206e6f7420656e6f7567685661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665725661756c743a6368616c6c656e67653a2070726963652063616e6e6f7420626520304f6e6c79206f776e657220697320616c6c6f77656420746f20646f20697400005661756c743a3a6275793a2063616e6e6f74207472616e73666572204541552070656e616c74792e5661756c743a6275793a204e6f7420656e6f7567682045415520666f722070656e616c74795661756c743a3a73656c6c434c474e28293a20434c474e20736f6c64206973206d6f7265207468616e206578706563746564436f7665722073686f727466616c6c3a206e6f2073686f727466616c6c20746f20636f7665725661756c743a3a6275793a2063616e6e6f74207472616e73666572205573657220546f6b656e2e5661756c743a3a636f76657253686f727466616c6c28293a2063616e6e6f74207472616e736665722045415520626f756e74792e5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20636c6f73652d6f757420616c726561647920696e697469617465645661756c743a3a736c61736828293a2070617920636c6f7365206f757420626f756e7479206572726f725661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20696e69746961746f725661756c743a6368616c6c656e67653a2063616e6e6f74207472616e73666572204541552e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c743a72656465656d4368616c6c656e676528293a2063616e6e6f74207472616e73666572204541555661756c743a3a7374616b653a2063616e6e6f74207472616e7366657220436c474e2e4f6e6c7920434c474e20686f6c6465722077697468206174206c65617374203525206f662072656d61696e696e67206f75747374616e64696e672045415520646562742063616e20696e697469617465206120434c474e206d696e745661756c743a7061794f66663a204e6f7420656e6f7567682045415520746f20706179206f66665661756c743a3a636c6f736528293a20636c6f736520616c6c6f776564206f6e6c7920696620646562742069732070616964206f66665661756c743a3a676574507269636528293a20496e636f72726563742073746174653a204c696d697420697320627265616368656420696e207468652066757475726521436f7665722073686f727466616c6c3a2063616e2062652063616c6c6564206f6e6c7920616674657220736c617368696e675661756c743a3a73656c6c434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520626f7567687420666f7220434c474e5661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665722e204f6e6c79206368616c6c656e6765722063616e20627579206f75742e5661756c743a3a627579434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520736f6c6420746f2062757920434c474e5661756c743a3a627579434c474e28293a20434c474e20626f75676874206973206c657373207468616e206578706563746564536c617368696e673a20546f6f206d616e792045415520676f742066726f6d20736c617368696e675661756c743a20696e697469616c2061756374696f6e206973206e6f742066696e6973686564207965745661756c743a3a62757928293a204e6f7420656e6f75676820746f6b656e7320746f2073656c6c5661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20626964646572a2646970667358221220d7d22ce7ab84ca2c5f67fcb00387255113de8f87f4503700cb456393eca6ba2764736f6c63430007000033";

    public static final String FUNC_BORROW = "borrow";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CANBORROW = "canBorrow";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_CLOSE = "close";

    public static final String FUNC_COVERSHORTFALL = "coverShortfall";

    public static final String FUNC_GETCHALLENGELOCKED = "getChallengeLocked";

    public static final String FUNC_GETCHALLENGEWINNER = "getChallengeWinner";

    public static final String FUNC_GETCOLLATERALINEAU = "getCollateralInEau";

    public static final String FUNC_GETCREDITLIMIT = "getCreditLimit";

    public static final String FUNC_GETFEES = "getFees";

    public static final String FUNC_GETPRICE = "getPrice";

    public static final String FUNC_GETPRINCIPAL = "getPrincipal";

    public static final String FUNC_GETREDEEMABLECHALLENGE = "getRedeemableChallenge";

    public static final String FUNC_GETSTATE = "getState";

    public static final String FUNC_GETTOKENAMOUNT = "getTokenAmount";

    public static final String FUNC_GETTOTALDEBT = "getTotalDebt";

    public static final String FUNC_ISLIMITBREACHED = "isLimitBreached";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYOFF = "payOff";

    public static final String FUNC_REDEEMCHALLENGE = "redeemChallenge";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SLASH = "slash";

    public static final String FUNC_STAKE = "stake";

    public static final String FUNC_STARTINITIALLIQUIDITYAUCTION = "startInitialLiquidityAuction";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PURCHASE_EVENT = new Event("Purchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PurchaseEventResponse> getPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASE_EVENT, transactionReceipt);
        ArrayList<PurchaseEventResponse> responses = new ArrayList<PurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchaseEventResponse typedResponse = new PurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchaseEventResponse>() {
            @Override
            public PurchaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASE_EVENT, log);
                PurchaseEventResponse typedResponse = new PurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASE_EVENT));
        return purchaseEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> borrow(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger amount, BigInteger maxPrice, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(maxPrice), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> canBorrow() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CANBORROW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(BigInteger price, BigInteger eauToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(eauToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> close() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> coverShortfall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COVERSHORTFALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getChallengeLocked(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGELOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getChallengeWinner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGEWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getCollateralInEau() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCOLLATERALINEAU, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getCreditLimit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCREDITLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFees() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFEES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrice() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrincipal() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRINCIPAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getRedeemableChallenge(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREDEEMABLECHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getState() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTokenAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalDebt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALDEBT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isLimitBreached() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLIMITBREACHED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payOff(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAYOFF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemChallenge() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEMCHALLENGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> slash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SLASH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> stake(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startInitialLiquidityAuction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTINITIALLIQUIDITYAUCTION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PurchaseEventResponse extends BaseEventResponse {
        public BigInteger price;

        public String to;

        public BigInteger amount;
    }
}
