package contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Vault extends Contract {
    public static final String BINARY = "6080604052600060078190556009819055600a819055600c819055600d819055600f8190556010805461ffff60a01b19169055601280546001600160a01b03191690556013553480156200005257600080fd5b506040516200539638038062005396833981810160405260a08110156200007857600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b0319166001600160a01b03808816919091178083559451969795969395949293889390911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319163317908190556040805163077701eb60e41b815290516001600160a01b0392909216916377701eb091600480820192602092909190829003018186803b1580156200014157600080fd5b505afa15801562000156573d6000803e3d6000fd5b505050506040513d60208110156200016d57600080fd5b5051600380546001600160a01b0319166001600160a01b03928316179055600254604080516306a0241960e31b81529051919092169163350120c8916004808301926020929190829003018186803b158015620001c957600080fd5b505afa158015620001de573d6000803e3d6000fd5b505050506040513d6020811015620001f557600080fd5b5051600480546001600160a01b03199081166001600160a01b0393841617825560058054821688851617905560068690556007859055600e8054909116848416179081905560408051632abf68dd60e11b81529051919093169263557ed1ba9281810192602092909190829003018186803b1580156200027457600080fd5b505afa15801562000289573d6000803e3d6000fd5b505050506040513d6020811015620002a057600080fd5b5051600b5550505050506150dc80620002ba6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806375f91ec8116101045780639c64ab5e116100a2578063db8d55f111610071578063db8d55f1146103fd578063f2fde38b14610405578063f7376f0c1461042b578063f78be85a14610433576101cf565b80639c64ab5e146103b3578063a694fc3a146103bb578063a69bdf16146103d8578063c5ebeaec146103e0576101cf565b80638da5cb5b116100de5780638da5cb5b146103775780638f32d59b1461039b57806398d5fdca146103a35780639b434cf1146103ab576101cf565b806375f91ec81461033c57806384e5eed014610344578063862acd921461034c576101cf565b806343d726d611610171578063540968b91161014b578063540968b9146102f257806359a87bc1146102fa5780635acc43371461032c578063715018a614610334576101cf565b806343d726d6146102855780634da90ff21461028d57806353427b1a146102b3576101cf565b80632da25de3116101ad5780632da25de3146102385780632e4148901461024057806334ce998a14610263578063421715c21461027d576101cf565b80631865c57d146101d457806321adeed6146101fd578063243582ff14610219575b600080fd5b6101dc61043b565b604051808260078111156101ec57fe5b815260200191505060405180910390f35b61020561054e565b604080519115158252519081900360200190f35b6102366004803603602081101561022f57600080fd5b50356105fa565b005b6102366106aa565b6102366004803603604081101561025657600080fd5b5080359060200135610f98565b61026b6112b9565b60408051918252519081900360200190f35b61026b61130c565b6102366113af565b61026b600480360360208110156102a357600080fd5b50356001600160a01b03166117b6565b6102d9600480360360208110156102c957600080fd5b50356001600160a01b0316611881565b6040805192835260208301919091528051918290030190f35b6102d9611994565b6102366004803603606081101561031057600080fd5b50803590602081013590604001356001600160a01b0316611ac2565b610236611b76565b610236612195565b61026b612226565b61026b61222c565b6103546122ef565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61037f61230e565b604080516001600160a01b039092168252519081900360200190f35b61020561231d565b61026b61232e565b61023661235b565b61026b612519565b610236600480360360208110156103d157600080fd5b503561251f565b61026b612579565b610236600480360360208110156103f657600080fd5b503561259d565b61026b61277a565b6102366004803603602081101561041b57600080fd5b50356001600160a01b03166127fe565b61026b61284e565b61026b612949565b601054600090600160a81b900460ff16156104585750600661054b565b601054600160a01b900460ff16801561047757506104746112b9565b15155b156104845750600461054b565b601054600160a01b900460ff161561049e5750600561054b565b60065415806104e257506012546001600160a01b0316158015906104e257506012546001600160a01b03166000908152601160205260409020546104e061232e565b145b156104ef5750600761054b565b6104f76129e5565b156105045750600361054b565b61050c61054e565b80156105195750600f5415155b156105265750600261054b565b61052e61054e565b801561053a5750600f54155b156105475750600161054b565b5060005b90565b601054600090600160a81b900460ff161561056b5750600061054b565b600e5460408051632abf68dd60e11b815290516105e2926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105b157600080fd5b505afa1580156105c5573d6000803e3d6000fd5b505050506040513d60208110156105db57600080fd5b5051612a74565b158015906105f557506105f361130c565b155b905090565b601054600160a81b900460ff161561064b576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff161561069d576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6106a73382612aac565b50565b601054600160a81b900460ff16156106fb576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff161561074d576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6107556129e5565b6107905760405162461bcd60e51b815260040180806020018281038252602a81526020018061502c602a913960400191505060405180910390fd5b600061079a6112b9565b604080516002808252606080830184529394509091602083019080368337505060045482519293506001600160a01b0316918391506000906107d857fe5b6001600160a01b03928316602091820292909201015260035482519116908290600190811061080357fe5b6001600160a01b039283166020918202929092018101919091526002546040805163824150d560e01b81529051606094929092169263824150d592600480840193829003018186803b15801561085857600080fd5b505afa15801561086c573d6000803e3d6000fd5b505050506040513d602081101561088257600080fd5b5051604080516307c0329d60e21b815260048101868152602482019283528551604483015285516001600160a01b0390941693631f00ca749388938893926064909101906020858101910280838360005b838110156108eb5781810151838201526020016108d3565b50505050905001935050505060006040518083038186803b15801561090f57600080fd5b505afa158015610923573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561094c57600080fd5b8101908080516040519392919084600160201b82111561096b57600080fd5b90830190602082018581111561098057600080fd5b82518660208202830111600160201b8211171561099c57600080fd5b82525081516020918201928201910280838360005b838110156109c95781810151838201526020016109b1565b5050505090500160405250505090506000816000815181106109e757fe5b60200260200101519050600854811115610a0057506008545b6000610a0d82600a612eb8565b90506000610a1c826004612eb8565b600480546010546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015610a7857600080fd5b505af1158015610a8c573d6000803e3d6000fd5b505050506040513d6020811015610aa257600080fd5b5051610adf5760405162461bcd60e51b815260040180806020018281038252602a815260200180614cf5602a913960400191505060405180910390fd5b600480546040805163a9059cbb60e01b8152339381019390935260248301849052516001600160a01b039091169163a9059cbb9160448083019260209291908290030181600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b505050506040513d6020811015610b5e57600080fd5b5051610b9b5760405162461bcd60e51b8152600401808060200182810382526029815260200180614aeb6029913960400191505060405180910390fd5b6004546001600160a01b03166342966c68610bc1610bba846002612f01565b8590612f5a565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610bf757600080fd5b505af1158015610c0b573d6000803e3d6000fd5b505060088054859003908190558511159150610c2990505760085492505b600260009054906101000a90046001600160a01b03166001600160a01b031663824150d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7757600080fd5b505afa158015610c8b573d6000803e3d6000fd5b505050506040513d6020811015610ca157600080fd5b50516040805163d06ca61f60e01b815260048101868152602482019283528851604483015288516001600160a01b039094169363d06ca61f9388938b93926064909101906020858101910280838360005b83811015610d0a578181015183820152602001610cf2565b50505050905001935050505060006040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d6b57600080fd5b8101908080516040519392919084600160201b821115610d8a57600080fd5b908301906020820185811115610d9f57600080fd5b82518660208202830111600160201b82111715610dbb57600080fd5b82525081516020918201928201910280838360005b83811015610de8578181015183820152602001610dd0565b505050509050016040525050509350600084600181518110610e0657fe5b6020026020010151905086811115610e1b5750855b6000610e278583612f9c565b6008805487900390556009549091508110610eb85760035460095460408051630852cd8d60e31b81526004810192909252516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610e8c57600080fd5b505af1158015610ea0573d6000803e3d6000fd5b50505050600954810390506000600981905550610f2c565b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610f0557600080fd5b505af1158015610f19573d6000803e3d6000fd5b5050600980549390930390925550600090505b600a54811115610f6d5760405162461bcd60e51b81526004018080602001828103825260288152602001806150046028913960400191505060405180910390fd5b610f768161341d565b50506000600a5550506010805460ff60a01b1916600160a01b17905550505050565b601054600160a01b900460ff16158015610fbc5750601054600160a81b900460ff16155b8015610fcd5750610fcb6129e5565b155b61101e576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e697469616c2061756374696f6e206973206f7665720000604482015290519081900360640190fd5b600061102861232e565b9050826110665760405162461bcd60e51b8152600401808060200182810382526022815260200180614b716022913960400191505060405180910390fd5b8083106110ba576040805162461bcd60e51b815260206004820152601f60248201527f5661756c743a6368616c6c656e67653a20707269636520746f6f206869676800604482015290519081900360640190fd5b6005546040805163313ce56760e01b81529051611148926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561110057600080fd5b505afa158015611114573d6000803e3d6000fd5b505050506040513d602081101561112a57600080fd5b505160065460ff909116600a0a906111429086612f01565b90612eb8565b8210156111865760405162461bcd60e51b815260040180806020018281038252602e815260200180614b14602e913960400191505060405180910390fd5b600354604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b1580156111e057600080fd5b505af11580156111f4573d6000803e3d6000fd5b505050506040513d602081101561120a57600080fd5b50516112475760405162461bcd60e51b8152600401808060200182810382526025815260200180614d4c6025913960400191505060405180910390fd5b6013805483019055611257614a8d565b50604080518082018252848152602080820185815233600090815260119092528382208351815590516001909101556012546001600160a01b0316815291909120548411156112b357601280546001600160a01b031916331790555b50505050565b60006105f5600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b157600080fd5b601054600090600160a81b900460ff16156113295750600061054b565b600061137c600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b157600080fd5b90506000611388612949565b905081811161139c5760009250505061054b565b6113a68183612f5a565b9250505061054b565b6113b761231d565b6113f6576040805162461bcd60e51b815260206004820152601e6024820152600080516020614b93833981519152604482015290519081900360640190fd5b600e5460408051632abf68dd60e11b8152905161143c926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105b157600080fd5b156114785760405162461bcd60e51b8152600401808060200182810382526036815260200180614e646036913960400191505060405180910390fd5b6005546001600160a01b031663a9059cbb61149161230e565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156114dc57600080fd5b505afa1580156114f0573d6000803e3d6000fd5b505050506040513d602081101561150657600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561155757600080fd5b505af115801561156b573d6000803e3d6000fd5b505050506040513d602081101561158157600080fd5b505060006006556004546001600160a01b031663a9059cbb6115a161230e565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b1580156115ed57600080fd5b505afa158015611601573d6000803e3d6000fd5b505050506040513d602081101561161757600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561166857600080fd5b505af115801561167c573d6000803e3d6000fd5b505050506040513d602081101561169257600080fd5b50506003546001600160a01b031663a9059cbb6116ad61230e565b601354600354604080516370a0823160e01b8152306004820152905161172f93926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156116fd57600080fd5b505afa158015611711573d6000803e3d6000fd5b505050506040513d602081101561172757600080fd5b505190612f5a565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561177557600080fd5b505af1158015611789573d6000803e3d6000fd5b505050506040513d602081101561179f57600080fd5b50506010805460ff60a81b1916600160a81b179055565b6012546000906001600160a01b0383811691161415611878576005546040805163313ce56760e01b81529051611871926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561181557600080fd5b505afa158015611829573d6000803e3d6000fd5b505050506040513d602081101561183f57600080fd5b50516006546012546001600160a01b031660009081526011602052604090205460ff909216600a0a9161114291612f01565b905061187c565b5060005b919050565b6001600160a01b03808216600081815260116020526040812060010154601254909391929116141561198f5760006118b761232e565b9050611964600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d602081101561193457600080fd5b50516001600160a01b03861660009081526011602052604090205460065460ff909216600a0a9161114291612f01565b6001600160a01b03851660009081526011602052604090205493039281141561198d5760065491505b505b915091565b6000806119a033611881565b909250905080156119e057336000818152601160205260409020546119c8913091849161361a565b336000908152601160205260408120600101556119fa565b336000908152601160205260409020600101805483900390555b6003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b505050506040513d6020811015611a7857600080fd5b5051611ab55760405162461bcd60e51b815260040180806020018281038252602c815260200180614d92602c913960400191505060405180910390fd5b6013805483900390559091565b601054600160a81b900460ff1615611b13576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff1615611b65576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b611b713384848461361a565b505050565b601054600160a81b900460ff1615611bc7576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b611bcf6129e5565b611c0a5760405162461bcd60e51b815260040180806020018281038252602a81526020018061502c602a913960400191505060405180910390fd5b601054600160a01b900460ff16611c525760405162461bcd60e51b8152600401808060200182810382526032815260200180614ede6032913960400191505060405180910390fd5b6000611c5c6112b9565b905060008111611c9d5760405162461bcd60e51b8152600401808060200182810382526026815260200180614c326026913960400191505060405180910390fd5b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b158015611ce257600080fd5b505afa158015611cf6573d6000803e3d6000fd5b505050506040513d6020811015611d0c57600080fd5b505160048054604080516370a0823160e01b81523393810193909352516001600160a01b0393841693633ddac9539392169182916370a0823191602480820192602092909190829003018186803b158015611d6657600080fd5b505afa158015611d7a573d6000803e3d6000fd5b505050506040513d6020811015611d9057600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b158015611ddf57600080fd5b505afa158015611df3573d6000803e3d6000fd5b505050506040513d6020811015611e0957600080fd5b50519050611e18826014612eb8565b811015611e565760405162461bcd60e51b815260040180806020018281038252605c815260200180614de1605c913960600191505060405180910390fd5b6000611e6383600a612eb8565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb557600080fd5b505afa158015611ec9573d6000803e3d6000fd5b505050506040513d6020811015611edf57600080fd5b50516003546001600160a01b0391821691633ddac9539116611f018786613e6c565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015611f4557600080fd5b505afa158015611f59573d6000803e3d6000fd5b505050506040513d6020811015611f6f57600080fd5b5051600254604080516305c0584560e41b81523060048201526024810184905290519293506001600160a01b0390911691635c0584509160448082019260009290919082900301818387803b158015611fc757600080fd5b505af1158015611fdb573d6000803e3d6000fd5b50505050611ffb81611ff68487613e6c90919063ffffffff16565b612f9c565b5060035460408051630852cd8d60e31b81526004810187905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b15801561204957600080fd5b505af115801561205d573d6000803e3d6000fd5b505060006009555050600e5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b1580156120ab57600080fd5b505afa1580156120bf573d6000803e3d6000fd5b505050506040513d60208110156120d557600080fd5b5051600b556003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561212e57600080fd5b505af1158015612142573d6000803e3d6000fd5b505050506040513d602081101561215857600080fd5b50516112b35760405162461bcd60e51b8152600401808060200182810382526034815260200180614c7f6034913960400191505060405180910390fd5b61219d61231d565b6121dc576040805162461bcd60e51b815260206004820152601e6024820152600080516020614b93833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065490565b6000680579a814e10a740000612240612579565b6122535750670de0b6b3a764000061229c565b600061227b612260612579565b61114268056bc75e2d6310000061227561284e565b90612f01565b905080821061228e57808203915061229a565b670de0b6b3a764000091505b505b600d546000906122ae90612710612eb8565b90508082106122c15780820391506122cd565b670de0b6b3a764000091505b670de0b6b3a76400008210156122e957670de0b6b3a764000091505b50905090565b6012546001600160a01b03166000818152601160205260409020549091565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60006105f561233b613ec6565b6012546001600160a01b031660009081526011602052604090205461400e565b601054600160a81b900460ff16156123ac576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff16156123fe576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b61240661054e565b6124415760405162461bcd60e51b8152600401808060200182810382526043815260200180614aa86043913960600191505060405180910390fd5b600f54156124805760405162461bcd60e51b8152600401808060200182810382526042815260200180614cb36042913960600191505060405180910390fd5b600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ce57600080fd5b505afa1580156124e2573d6000803e3d6000fd5b505050506040513d60208110156124f857600080fd5b5051600f55601080546001600160a01b03191633179055612517614025565b565b600d5490565b601054600160a81b900460ff1615612570576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b6106a781614118565b601054600090600160a81b900460ff16156125965750600061054b565b5060095490565b601054600160a81b900460ff16156125ee576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff1615612640576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b61264861231d565b612687576040805162461bcd60e51b815260206004820152601e6024820152600080516020614b93833981519152604482015290519081900360640190fd5b61268f61130c565b8111156126e3576040805162461bcd60e51b815260206004820152601a60248201527f437265646974206c696d69742069732065786861757374656420000000000000604482015290519081900360640190fd5b6002546001600160a01b031663f97c6e116126fc61230e565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561274357600080fd5b505af1158015612757573d6000803e3d6000fd5b505060098054840190555061276c9050614025565b6106a7600182600b54611b71565b60006105f5600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127cd57600080fd5b505afa1580156127e1573d6000803e3d6000fd5b505050506040513d60208110156127f757600080fd5b50516141ed565b61280661231d565b612845576040805162461bcd60e51b815260206004820152601e6024820152600080516020614b93833981519152604482015290519081900360640190fd5b6106a78161421a565b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b15801561289357600080fd5b505afa1580156128a7573d6000803e3d6000fd5b505050506040513d60208110156128bd57600080fd5b50516004805460085460408051633ddac95360e01b81526001600160a01b0393841694810194909452602484019190915251921691633ddac95391604480820192602092909190829003018186803b15801561291857600080fd5b505afa15801561292c573d6000803e3d6000fd5b505050506040513d602081101561294257600080fd5b5051905090565b60006105f5600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561299c57600080fd5b505afa1580156129b0573d6000803e3d6000fd5b505050506040513d60208110156129c657600080fd5b505160ff16600a0a6111426004816129dc61232e565b60065490612f01565b6000600f546000141580156105f55750600f54600e5460408051632abf68dd60e11b815290516202bf2093926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b158015612a4057600080fd5b505afa158015612a54573d6000803e3d6000fd5b505050506040513d6020811015612a6a57600080fd5b5051031015905090565b601054600090600160a81b900460ff1615612a915750600061187c565b612aa6612a9d836141ed565b60095490613e6c565b92915050565b6001600160a01b0382163014612b9557600354604080516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015612b1857600080fd5b505af1158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b5051612b95576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616e6e6f74207472616e73666572204541552e0000000000604482015290519081900360640190fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612bdf57600080fd5b505afa158015612bf3573d6000803e3d6000fd5b505050506040513d6020811015612c0957600080fd5b50511015612c485760405162461bcd60e51b8152600401808060200182810382526027815260200180614e3d6027913960400191505060405180910390fd5b612ccd600082600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c9c57600080fd5b505afa158015612cb0573d6000803e3d6000fd5b505050506040513d6020811015612cc657600080fd5b5051611b71565b6000612cd882614288565b90506000600954821115612cfa57506009805460009091559081900390612d06565b50600980548290039055805b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015612d5357600080fd5b505af1158015612d67573d6000803e3d6000fd5b50506005546040805163313ce56760e01b81529051612dfa945060049350611142926001600160a01b03169163313ce56791818601916020919081900387018186803b158015612db657600080fd5b505afa158015612dca573d6000803e3d6000fd5b505050506040513d6020811015612de057600080fd5b505160075460065460ff909216600a0a9161114291612f01565b600a54600954612e0991613e6c565b11612e19576000600c819055600f555b6000612e2361232e565b90508060075414612e345760078190555b600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e8257600080fd5b505afa158015612e96573d6000803e3d6000fd5b505050506040513d6020811015612eac57600080fd5b5051600b555050505050565b6000612efa83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061432a565b9392505050565b600082612f1057506000612aa6565b82820282848281612f1d57fe5b0414612efa5760405162461bcd60e51b8152600401808060200182810382526021815260200180614d716021913960400191505060405180910390fd5b6000612efa83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506143cc565b600480546002546040805163824150d560e01b815290516000946001600160a01b039485169463095ea7b394169263824150d59281830192602092829003018186803b158015612feb57600080fd5b505afa158015612fff573d6000803e3d6000fd5b505050506040513d602081101561301557600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018790525160448083019260209291908290030181600087803b15801561306557600080fd5b505af1158015613079573d6000803e3d6000fd5b505050506040513d602081101561308f57600080fd5b50506040805160028082526060808301845292602083019080368337505060045482519293506001600160a01b0316918391506000906130cb57fe5b6001600160a01b0392831660209182029290920101526003548251911690829060019081106130f657fe5b6001600160a01b03928316602091820292909201810191909152600e5460408051632abf68dd60e11b81529051600094929092169263557ed1ba92600480840193829003018186803b15801561314b57600080fd5b505afa15801561315f573d6000803e3d6000fd5b505050506040513d602081101561317557600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b1580156131c757600080fd5b505afa1580156131db573d6000803e3d6000fd5b505050506040513d60208110156131f157600080fd5b5051604051634401edf760e11b8152600481018781526024820189905230606483018190526084830186905260a060448401908152875160a485015287516001600160a01b0390951694638803dbee948b948d948b9490938b9360c401906020878101910280838360005b8381101561327457818101518382015260200161325c565b505050509050019650505050505050600060405180830381600087803b15801561329d57600080fd5b505af11580156132b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156132da57600080fd5b8101908080516040519392919084600160201b8211156132f957600080fd5b90830190602082018581111561330e57600080fd5b82518660208202830111600160201b8211171561332a57600080fd5b82525081516020918201928201910280838360005b8381101561335757818101518382015260200161333f565b50505050905001604052505050905060008160008151811061337557fe5b602002602001015190508160018151811061338c57fe5b60200260200101519450868111156133d55760405162461bcd60e51b8152600401808060200182810382526032815260200180614c006032913960400191505060405180910390fd5b8585146134135760405162461bcd60e51b815260040180806020018281038252603a815260200180614f10603a913960400191505060405180910390fd5b5050505092915050565b600061342a826002612eb8565b6003546002546040805163824150d560e01b815290519394506001600160a01b039283169363095ea7b3939092169163824150d591600480820192602092909190829003018186803b15801561347f57600080fd5b505afa158015613493573d6000803e3d6000fd5b505050506040513d60208110156134a957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b1580156134f957600080fd5b505af115801561350d573d6000803e3d6000fd5b505050506040513d602081101561352357600080fd5b506000905061353182614426565b6004805460408051630852cd8d60e31b8152928301849052519293506001600160a01b0316916342966c689160248082019260009290919082900301818387803b15801561357e57600080fd5b505af1158015613592573d6000803e3d6000fd5b50506003546001600160a01b031691506391c05b0b90506135b38585612f5a565b6040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156135e957600080fd5b505af11580156135fd573d6000803e3d6000fd5b505050506040513d602081101561361357600080fd5b5050505050565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561366557600080fd5b505afa158015613679573d6000803e3d6000fd5b505050506040513d602081101561368f57600080fd5b50518311156136cf5760405162461bcd60e51b81526004018080602001828103825260278152602001806150566027913960400191505060405180910390fd5b60006136d961232e565b90506000811161371a5760405162461bcd60e51b815260040180806020018281038252602f815260200180614b42602f913960400191505060405180910390fd5b6012546001600160a01b031633148061374c57506012546001600160a01b031660009081526011602052604090205481115b6137875760405162461bcd60e51b815260040180806020018281038252604d815260200180614f4a604d913960600191505060405180910390fd5b828111156137dc576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a3a62757928293a20507269636520746f6f206c6f770000000000604482015290519081900360640190fd5b600061386b600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561382f57600080fd5b505afa158015613843573d6000803e3d6000fd5b505050506040513d602081101561385957600080fd5b505160ff16600a0a6111428785612f01565b9050600f54600014613d4557600061388482600a612eb8565b90506001600160a01b038716301461395957600354604080516323b872dd60e01b81526001600160a01b038a8116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b1580156138f257600080fd5b505af1158015613906573d6000803e3d6000fd5b505050506040513d602081101561391c57600080fd5b50516139595760405162461bcd60e51b8152600401808060200182810382526028815260200180614bb36028913960400191505060405180910390fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156139a357600080fd5b505afa1580156139b7573d6000803e3d6000fd5b505050506040513d60208110156139cd57600080fd5b50511015613a0c5760405162461bcd60e51b8152600401808060200182810382526025815260200180614bdb6025913960400191505060405180910390fd5b6003546002546040805163824150d560e01b815290516001600160a01b039384169363095ea7b393169163824150d5916004808301926020929190829003018186803b158015613a5b57600080fd5b505afa158015613a6f573d6000803e3d6000fd5b505050506040513d6020811015613a8557600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b158015613ad557600080fd5b505af1158015613ae9573d6000803e3d6000fd5b505050506040513d6020811015613aff57600080fd5b5060009050613b0d82614426565b90506000613b216064611142846021612f01565b600480546010546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015613b7d57600080fd5b505af1158015613b91573d6000803e3d6000fd5b505050506040513d6020811015613ba757600080fd5b5051613be45760405162461bcd60e51b815260040180806020018281038252602d815260200180614d1f602d913960400191505060405180910390fd5b6000613bf66064611142856021612f01565b600480546040805163a9059cbb60e01b81526001600160a01b038c81169482019490945260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b158015613c5157600080fd5b505af1158015613c65573d6000803e3d6000fd5b505050506040513d6020811015613c7b57600080fd5b5051613cb85760405162461bcd60e51b815260040180806020018281038252602a81526020018061507d602a913960400191505060405180910390fd5b6004546001600160a01b03166342966c68613cdd83613cd78787612f5a565b90612f5a565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613d1357600080fd5b505af1158015613d27573d6000803e3d6000fd5b50505050613d3e8486612f5a90919063ffffffff16565b9450505050505b613d4f8682612aac565b6005546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015613da557600080fd5b505af1158015613db9573d6000803e3d6000fd5b505050506040513d6020811015613dcf57600080fd5b5051613e0c5760405162461bcd60e51b8152600401808060200182810382526027815260200180614c586027913960400191505060405180910390fd5b6006805486900390556007548214613e245760078290555b6040805186815290516001600160a01b0385169184917f9d995b79e708615dc7201d66ebdcb94d773fe76aac960305383a8b4f8dda9f059181900360200190a3505050505050565b600082820183811015612efa576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600754600f54610708901561400a57600f54600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015613f2657600080fd5b505afa158015613f3a573d6000803e3d6000fd5b505050506040513d6020811015613f5057600080fd5b50511015613f8f5760405162461bcd60e51b8152600401808060200182810382526044815260200180614e9a6044913960600191505060405180910390fd5b6000613ff3613fec83611142600f54600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116fd57600080fd5b60646148db565b9050614006606461114285848303612f01565b9250505b5090565b60008183101561401e5781612efa565b5090919050565b600e5460408051632abf68dd60e11b8152905161409c926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b15801561406b57600080fd5b505afa15801561407f573d6000803e3d6000fd5b505050506040513d602081101561409557600080fd5b50516148ea565b600c55600a55600e5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b1580156140e757600080fd5b505afa1580156140fb573d6000803e3d6000fd5b505050506040513d602081101561411157600080fd5b5051600b55565b60048054604080516323b872dd60e01b8152339381019390935230602484015260448301849052516001600160a01b03909116916323b872dd9160648083019260209291908290030181600087803b15801561417357600080fd5b505af1158015614187573d6000803e3d6000fd5b505050506040513d602081101561419d57600080fd5b50516141da5760405162461bcd60e51b8152600401808060200182810382526023815260200180614dbe6023913960400191505060405180910390fd5b6141e2614025565b600880549091019055565b601054600090600160a81b900460ff161561420a5750600061187c565b614213826148ea565b5092915050565b6001600160a01b03811661422d57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60008060006142de600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561406b57600080fd5b600c819055859450909250905060008284111561430657506000600a55918190039181614311565b50828203600a556000925b600d8054820190556143228161341d565b505050919050565b600081836143b65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561437b578181015183820152602001614363565b50505050905090810190601f1680156143a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816143c257fe5b0495945050505050565b6000818484111561441e5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561437b578181015183820152602001614363565b505050900390565b6040805160028082526060808301845260009390929190602083019080368337505060035482519293506001600160a01b03169183915060009061446657fe5b6001600160a01b03928316602091820292909201015260045482519116908290600190811061449157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006145bd600a6111426009600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561450b57600080fd5b505afa15801561451f573d6000803e3d6000fd5b505050506040513d602081101561453557600080fd5b505160035460408051633ddac95360e01b81526001600160a01b039283166004820152602481018c905290519190921691633ddac953916044808301926020929190829003018186803b15801561458b57600080fd5b505afa15801561459f573d6000803e3d6000fd5b505050506040513d60208110156145b557600080fd5b505190612f01565b90506000600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561460f57600080fd5b505afa158015614623573d6000803e3d6000fd5b505050506040513d602081101561463957600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b15801561468b57600080fd5b505afa15801561469f573d6000803e3d6000fd5b505050506040513d60208110156146b557600080fd5b50516040516338ed173960e01b8152600481018881526024820186905230606483018190526084830186905260a060448401908152885160a485015288516001600160a01b03909516946338ed1739948c948a948c9490938b9360c401906020878101910280838360005b83811015614738578181015183820152602001614720565b505050509050019650505050505050600060405180830381600087803b15801561476157600080fd5b505af1158015614775573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561479e57600080fd5b8101908080516040519392919084600160201b8211156147bd57600080fd5b9083019060208201858111156147d257600080fd5b82518660208202830111600160201b821117156147ee57600080fd5b82525081516020918201928201910280838360005b8381101561481b578181015183820152602001614803565b5050505090500160405250505090508060018151811061483757fe5b602002602001015194508060008151811061484e57fe5b602002602001015186146148935760405162461bcd60e51b815260040180806020018281038252603a815260200180614f97603a913960400191505060405180910390fd5b848311156148d25760405162461bcd60e51b8152600401808060200182810382526033815260200180614fd16033913960400191505060405180910390fd5b50505050919050565b600081831061401e5781612efa565b600080600b54831015614944576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f742063616c63756c6174652066656520696e207468652070617374604482015290519081900360640190fd5b600f54839015801590614958575083600f54105b156149625750600f545b6201518068056bc75e2d63100000600061498061016d61114261222c565b9050600c549450600a5495506000600b5490505b84811015614a83576000614a356004611142600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156149f457600080fd5b505afa158015614a08573d6000803e3d6000fd5b505050506040513d6020811015614a1e57600080fd5b505160075460065460ff9092169161114291612f01565b905080614a4d89600954613e6c90919063ffffffff16565b1115614a5c5786614a5c578196505b614a7784611142858b60095401612f0190919063ffffffff16565b90970196508301614994565b5050505050915091565b60405180604001604052806000815260200160008152509056fe5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20637265646974206c696d6974206973206e6f742062726561636865645661756c743a3a736c61736828293a2070617920736c617368696e6720626f756e7479206572726f725661756c743a6368616c6c656e67653a206c6f636b20616d6f756e7420696e20454155206e6f7420656e6f7567685661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665725661756c743a6368616c6c656e67653a2070726963652063616e6e6f7420626520304f6e6c79206f776e657220697320616c6c6f77656420746f20646f20697400005661756c743a3a6275793a2063616e6e6f74207472616e73666572204541552070656e616c74792e5661756c743a6275793a204e6f7420656e6f7567682045415520666f722070656e616c74795661756c743a3a73656c6c434c474e28293a20434c474e20736f6c64206973206d6f7265207468616e206578706563746564436f7665722073686f727466616c6c3a206e6f2073686f727466616c6c20746f20636f7665725661756c743a3a6275793a2063616e6e6f74207472616e73666572205573657220546f6b656e2e5661756c743a3a636f76657253686f727466616c6c28293a2063616e6e6f74207472616e736665722045415520626f756e74792e5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20636c6f73652d6f757420616c726561647920696e697469617465645661756c743a3a736c61736828293a2070617920636c6f7365206f757420626f756e7479206572726f725661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20696e69746961746f725661756c743a6368616c6c656e67653a2063616e6e6f74207472616e73666572204541552e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c743a72656465656d4368616c6c656e676528293a2063616e6e6f74207472616e73666572204541555661756c743a3a7374616b653a2063616e6e6f74207472616e7366657220436c474e2e4f6e6c7920434c474e20686f6c6465722077697468206174206c65617374203525206f662072656d61696e696e67206f75747374616e64696e672045415520646562742063616e20696e697469617465206120434c474e206d696e745661756c743a7061794f66663a204e6f7420656e6f7567682045415520746f20706179206f66665661756c743a3a636c6f736528293a20636c6f736520616c6c6f776564206f6e6c7920696620646562742069732070616964206f66665661756c743a3a676574507269636528293a20496e636f72726563742073746174653a204c696d697420697320627265616368656420696e207468652066757475726521436f7665722073686f727466616c6c3a2063616e2062652063616c6c6564206f6e6c7920616674657220736c617368696e675661756c743a3a73656c6c434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520626f7567687420666f7220434c474e5661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665722e204f6e6c79206368616c6c656e6765722063616e20627579206f75742e5661756c743a3a627579434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520736f6c6420746f2062757920434c474e5661756c743a3a627579434c474e28293a20434c474e20626f75676874206973206c657373207468616e206578706563746564536c617368696e673a20546f6f206d616e792045415520676f742066726f6d20736c617368696e675661756c743a20696e697469616c2061756374696f6e206973206e6f742066696e6973686564207965745661756c743a3a62757928293a204e6f7420656e6f75676820746f6b656e7320746f2073656c6c5661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20626964646572a26469706673582212201ed3044516ccea4c77b45700d72f6b6c5741b3b7d67d3d16616bc4c134b9e91c64736f6c63430007000033";

    public static final String FUNC_BORROW = "borrow";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CANBORROW = "canBorrow";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_CLOSE = "close";

    public static final String FUNC_COVERSHORTFALL = "coverShortfall";

    public static final String FUNC_GETCHALLENGELOCKED = "getChallengeLocked";

    public static final String FUNC_GETCHALLENGEWINNER = "getChallengeWinner";

    public static final String FUNC_GETCOLLATERALINEAU = "getCollateralInEau";

    public static final String FUNC_GETCREDITLIMIT = "getCreditLimit";

    public static final String FUNC_GETFEERATE = "getFeeRate";

    public static final String FUNC_GETFEES = "getFees";

    public static final String FUNC_GETPRICE = "getPrice";

    public static final String FUNC_GETPRINCIPAL = "getPrincipal";

    public static final String FUNC_GETREDEEMABLECHALLENGE = "getRedeemableChallenge";

    public static final String FUNC_GETSTATE = "getState";

    public static final String FUNC_GETTOKENAMOUNT = "getTokenAmount";

    public static final String FUNC_GETTOTALDEBT = "getTotalDebt";

    public static final String FUNC_GETTOTALFEESREPAID = "getTotalFeesRepaid";

    public static final String FUNC_ISLIMITBREACHED = "isLimitBreached";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYOFF = "payOff";

    public static final String FUNC_REDEEMCHALLENGE = "redeemChallenge";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SLASH = "slash";

    public static final String FUNC_STAKE = "stake";

    public static final String FUNC_STARTINITIALLIQUIDITYAUCTION = "startInitialLiquidityAuction";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PURCHASE_EVENT = new Event("Purchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PurchaseEventResponse> getPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASE_EVENT, transactionReceipt);
        ArrayList<PurchaseEventResponse> responses = new ArrayList<PurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchaseEventResponse typedResponse = new PurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchaseEventResponse>() {
            @Override
            public PurchaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASE_EVENT, log);
                PurchaseEventResponse typedResponse = new PurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASE_EVENT));
        return purchaseEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> borrow(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger amount, BigInteger maxPrice, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(maxPrice), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> canBorrow() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CANBORROW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(BigInteger price, BigInteger eauToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(eauToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> close() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> coverShortfall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COVERSHORTFALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getChallengeLocked(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGELOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getChallengeWinner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGEWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getCollateralInEau() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCOLLATERALINEAU, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getCreditLimit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCREDITLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFeeRate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFEERATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFees() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFEES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrice() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrincipal() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRINCIPAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getRedeemableChallenge(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREDEEMABLECHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getState() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTokenAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalDebt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALDEBT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalFeesRepaid() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALFEESREPAID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isLimitBreached() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLIMITBREACHED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payOff(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAYOFF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemChallenge() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEMCHALLENGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> slash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SLASH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> stake(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startInitialLiquidityAuction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTINITIALLIQUIDITYAUCTION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PurchaseEventResponse extends BaseEventResponse {
        public BigInteger price;

        public String to;

        public BigInteger amount;
    }
}
