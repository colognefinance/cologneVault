package contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Vault extends Contract {
    public static final String BINARY = "6080604052600060078190556009819055600a819055600c819055600d819055600f8190556010805461ffff60a01b19169055601280546001600160a01b03191690556013553480156200005257600080fd5b506040516200545f3803806200545f833981810160405260a08110156200007857600080fd5b50805160208201516040808401516060850151608090950151600080546001600160a01b0319166001600160a01b03808816919091178083559451969795969395949293889390911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600280546001600160a01b0319163317908190556040805163077701eb60e41b815290516001600160a01b0392909216916377701eb091600480820192602092909190829003018186803b1580156200014157600080fd5b505afa15801562000156573d6000803e3d6000fd5b505050506040513d60208110156200016d57600080fd5b5051600380546001600160a01b0319166001600160a01b03928316179055600254604080516306a0241960e31b81529051919092169163350120c8916004808301926020929190829003018186803b158015620001c957600080fd5b505afa158015620001de573d6000803e3d6000fd5b505050506040513d6020811015620001f557600080fd5b5051600480546001600160a01b03199081166001600160a01b0393841617825560058054821688851617905560068690556007859055600e8054909116848416179081905560408051632abf68dd60e11b81529051919093169263557ed1ba9281810192602092909190829003018186803b1580156200027457600080fd5b505afa15801562000289573d6000803e3d6000fd5b505050506040513d6020811015620002a057600080fd5b5051600b5550505050506151a580620002ba6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806375f91ec8116100f9578063a694fc3a11610097578063db8d55f111610071578063db8d55f1146103ea578063f2fde38b146103f2578063f7376f0c14610418578063f78be85a14610420576101c4565b8063a694fc3a146103a8578063a69bdf16146103c5578063c5ebeaec146103cd576101c4565b80638f32d59b116100d35780638f32d59b1461038857806398d5fdca146103905780639b434cf1146103985780639c64ab5e146103a0576101c4565b806375f91ec814610331578063862acd92146103395780638da5cb5b14610364576101c4565b806343d726d611610166578063540968b911610140578063540968b9146102e757806359a87bc1146102ef5780635acc433714610321578063715018a614610329576101c4565b806343d726d61461027a5780634da90ff21461028257806353427b1a146102a8576101c4565b80632da25de3116101a25780632da25de31461022d5780632e4148901461023557806334ce998a14610258578063421715c214610272576101c4565b80631865c57d146101c957806321adeed6146101f2578063243582ff1461020e575b600080fd5b6101d1610428565b604051808260078111156101e157fe5b815260200191505060405180910390f35b6101fa61053b565b604080519115158252519081900360200190f35b61022b6004803603602081101561022457600080fd5b503561061e565b005b61022b6106ce565b61022b6004803603604081101561024b57600080fd5b5080359060200135610fbc565b6102606112dd565b60408051918252519081900360200190f35b610260611340565b61022b61141a565b6102606004803603602081101561029857600080fd5b50356001600160a01b0316611821565b6102ce600480360360208110156102be57600080fd5b50356001600160a01b03166118ec565b6040805192835260208301919091528051918290030190f35b6102ce6119ff565b61022b6004803603606081101561030557600080fd5b50803590602081013590604001356001600160a01b0316611b2d565b61022b611be1565b61022b612200565b610260612291565b610341612297565b604080516001600160a01b03909316835260208301919091528051918290030190f35b61036c6122b6565b604080516001600160a01b039092168252519081900360200190f35b6101fa6122c5565b6102606122d6565b61022b612303565b6102606125aa565b61022b600480360360208110156103be57600080fd5b50356125b0565b61026061260a565b61022b600480360360208110156103e357600080fd5b5035612665565b6102606128af565b61022b6004803603602081101561040857600080fd5b50356001600160a01b031661297a565b6102606129ca565b610260612ac5565b601054600090600160a81b900460ff161561044557506006610538565b601054600160a01b900460ff16801561046457506104616112dd565b15155b1561047157506004610538565b601054600160a01b900460ff161561048b57506005610538565b60065415806104cf57506012546001600160a01b0316158015906104cf57506012546001600160a01b03166000908152601160205260409020546104cd6122d6565b145b156104dc57506007610538565b6104e4612b61565b156104f157506003610538565b6104f961053b565b80156105065750600f5415155b1561051357506002610538565b61051b61053b565b80156105275750600f54155b1561053457506001610538565b5060005b90565b601054600090600160a81b900460ff161561058f576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600e5460408051632abf68dd60e11b81529051610606926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d60208110156105ff57600080fd5b5051612bf0565b158015906106195750610617611340565b155b905090565b601054600160a81b900460ff161561066f576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff16156106c1576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6106cb3382612c5f565b50565b601054600160a81b900460ff161561071f576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff1615610771576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b610779612b61565b6107b45760405162461bcd60e51b815260040180806020018281038252602a8152602001806150f5602a913960400191505060405180910390fd5b60006107be6112dd565b604080516002808252606080830184529394509091602083019080368337505060045482519293506001600160a01b0316918391506000906107fc57fe5b6001600160a01b03928316602091820292909201015260035482519116908290600190811061082757fe5b6001600160a01b039283166020918202929092018101919091526002546040805163824150d560e01b81529051606094929092169263824150d592600480840193829003018186803b15801561087c57600080fd5b505afa158015610890573d6000803e3d6000fd5b505050506040513d60208110156108a657600080fd5b5051604080516307c0329d60e21b815260048101868152602482019283528551604483015285516001600160a01b0390941693631f00ca749388938893926064909101906020858101910280838360005b8381101561090f5781810151838201526020016108f7565b50505050905001935050505060006040518083038186803b15801561093357600080fd5b505afa158015610947573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561097057600080fd5b8101908080516040519392919084600160201b82111561098f57600080fd5b9083019060208201858111156109a457600080fd5b82518660208202830111600160201b821117156109c057600080fd5b82525081516020918201928201910280838360005b838110156109ed5781810151838201526020016109d5565b505050509050016040525050509050600081600081518110610a0b57fe5b60200260200101519050600854811115610a2457506008545b6000610a3182600a61306b565b90506000610a4082600461306b565b600480546010546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506040513d6020811015610ac657600080fd5b5051610b035760405162461bcd60e51b815260040180806020018281038252602a815260200180614dbe602a913960400191505060405180910390fd5b600480546040805163a9059cbb60e01b8152339381019390935260248301849052516001600160a01b039091169163a9059cbb9160448083019260209291908290030181600087803b158015610b5857600080fd5b505af1158015610b6c573d6000803e3d6000fd5b505050506040513d6020811015610b8257600080fd5b5051610bbf5760405162461bcd60e51b8152600401808060200182810382526029815260200180614bb46029913960400191505060405180910390fd5b6004546001600160a01b03166342966c68610be5610bde8460026130b4565b859061310d565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b505060088054859003908190558511159150610c4d90505760085492505b600260009054906101000a90046001600160a01b03166001600160a01b031663824150d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9b57600080fd5b505afa158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b50516040805163d06ca61f60e01b815260048101868152602482019283528851604483015288516001600160a01b039094169363d06ca61f9388938b93926064909101906020858101910280838360005b83811015610d2e578181015183820152602001610d16565b50505050905001935050505060006040518083038186803b158015610d5257600080fd5b505afa158015610d66573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610d8f57600080fd5b8101908080516040519392919084600160201b821115610dae57600080fd5b908301906020820185811115610dc357600080fd5b82518660208202830111600160201b82111715610ddf57600080fd5b82525081516020918201928201910280838360005b83811015610e0c578181015183820152602001610df4565b505050509050016040525050509350600084600181518110610e2a57fe5b6020026020010151905086811115610e3f5750855b6000610e4b858361314f565b6008805487900390556009549091508110610edc5760035460095460408051630852cd8d60e31b81526004810192909252516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610eb057600080fd5b505af1158015610ec4573d6000803e3d6000fd5b50505050600954810390506000600981905550610f50565b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b5050600980549390930390925550600090505b600a54811115610f915760405162461bcd60e51b81526004018080602001828103825260288152602001806150cd6028913960400191505060405180910390fd5b610f9a816135d0565b50506000600a5550506010805460ff60a01b1916600160a01b17905550505050565b601054600160a01b900460ff16158015610fe05750601054600160a81b900460ff16155b8015610ff15750610fef612b61565b155b611042576040805162461bcd60e51b815260206004820152601e60248201527f5661756c743a20696e697469616c2061756374696f6e206973206f7665720000604482015290519081900360640190fd5b600061104c6122d6565b90508261108a5760405162461bcd60e51b8152600401808060200182810382526022815260200180614c3a6022913960400191505060405180910390fd5b8083106110de576040805162461bcd60e51b815260206004820152601f60248201527f5661756c743a6368616c6c656e67653a20707269636520746f6f206869676800604482015290519081900360640190fd5b6005546040805163313ce56760e01b8152905161116c926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561112457600080fd5b505afa158015611138573d6000803e3d6000fd5b505050506040513d602081101561114e57600080fd5b505160065460ff909116600a0a9061116690866130b4565b9061306b565b8210156111aa5760405162461bcd60e51b815260040180806020018281038252602e815260200180614bdd602e913960400191505060405180910390fd5b600354604080516323b872dd60e01b81523360048201523060248201526044810185905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b15801561120457600080fd5b505af1158015611218573d6000803e3d6000fd5b505050506040513d602081101561122e57600080fd5b505161126b5760405162461bcd60e51b8152600401808060200182810382526025815260200180614e156025913960400191505060405180910390fd5b601380548301905561127b614b56565b50604080518082018252848152602080820185815233600090815260119092528382208351815590516001909101556012546001600160a01b0316815291909120548411156112d757601280546001600160a01b031916331790555b50505050565b601054600090600160a81b900460ff16156112fa57506000610538565b600e5460408051632abf68dd60e11b81529051610619926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105d557600080fd5b601054600090600160a81b900460ff1615611394576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b60006113e7600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105d557600080fd5b905060006113f3612ac5565b905081811161140757600092505050610538565b611411818361310d565b92505050610538565b6114226122c5565b611461576040805162461bcd60e51b815260206004820152601e6024820152600080516020614c5c833981519152604482015290519081900360640190fd5b600e5460408051632abf68dd60e11b815290516114a7926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156105d557600080fd5b156114e35760405162461bcd60e51b8152600401808060200182810382526036815260200180614f2d6036913960400191505060405180910390fd5b6005546001600160a01b031663a9059cbb6114fc6122b6565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d602081101561157157600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156115c257600080fd5b505af11580156115d6573d6000803e3d6000fd5b505050506040513d60208110156115ec57600080fd5b505060006006556004546001600160a01b031663a9059cbb61160c6122b6565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561165857600080fd5b505afa15801561166c573d6000803e3d6000fd5b505050506040513d602081101561168257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156116d357600080fd5b505af11580156116e7573d6000803e3d6000fd5b505050506040513d60208110156116fd57600080fd5b50506003546001600160a01b031663a9059cbb6117186122b6565b601354600354604080516370a0823160e01b8152306004820152905161179a93926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561176857600080fd5b505afa15801561177c573d6000803e3d6000fd5b505050506040513d602081101561179257600080fd5b50519061310d565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156117e057600080fd5b505af11580156117f4573d6000803e3d6000fd5b505050506040513d602081101561180a57600080fd5b50506010805460ff60a81b1916600160a81b179055565b6012546000906001600160a01b03838116911614156118e3576005546040805163313ce56760e01b815290516118dc926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561188057600080fd5b505afa158015611894573d6000803e3d6000fd5b505050506040513d60208110156118aa57600080fd5b50516006546012546001600160a01b031660009081526011602052604090205460ff909216600a0a91611166916130b4565b90506118e7565b5060005b919050565b6001600160a01b0380821660008181526011602052604081206001015460125490939192911614156119fa5760006119226122d6565b90506119cf600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561197557600080fd5b505afa158015611989573d6000803e3d6000fd5b505050506040513d602081101561199f57600080fd5b50516001600160a01b03861660009081526011602052604090205460065460ff909216600a0a91611166916130b4565b6001600160a01b0385166000908152601160205260409020549303928114156119f85760065491505b505b915091565b600080611a0b336118ec565b90925090508015611a4b5733600081815260116020526040902054611a3391309184916137cd565b33600090815260116020526040812060010155611a65565b336000908152601160205260409020600101805483900390555b6003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b158015611ab957600080fd5b505af1158015611acd573d6000803e3d6000fd5b505050506040513d6020811015611ae357600080fd5b5051611b205760405162461bcd60e51b815260040180806020018281038252602c815260200180614e5b602c913960400191505060405180910390fd5b6013805483900390559091565b601054600160a81b900460ff1615611b7e576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff1615611bd0576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b611bdc338484846137cd565b505050565b601054600160a81b900460ff1615611c32576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b611c3a612b61565b611c755760405162461bcd60e51b815260040180806020018281038252602a8152602001806150f5602a913960400191505060405180910390fd5b601054600160a01b900460ff16611cbd5760405162461bcd60e51b8152600401808060200182810382526032815260200180614fa76032913960400191505060405180910390fd5b6000611cc76112dd565b905060008111611d085760405162461bcd60e51b8152600401808060200182810382526026815260200180614cfb6026913960400191505060405180910390fd5b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b158015611d4d57600080fd5b505afa158015611d61573d6000803e3d6000fd5b505050506040513d6020811015611d7757600080fd5b505160048054604080516370a0823160e01b81523393810193909352516001600160a01b0393841693633ddac9539392169182916370a0823191602480820192602092909190829003018186803b158015611dd157600080fd5b505afa158015611de5573d6000803e3d6000fd5b505050506040513d6020811015611dfb57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0390931660048401526024830191909152516044808301926020929190829003018186803b158015611e4a57600080fd5b505afa158015611e5e573d6000803e3d6000fd5b505050506040513d6020811015611e7457600080fd5b50519050611e8382601461306b565b811015611ec15760405162461bcd60e51b815260040180806020018281038252605c815260200180614eaa605c913960600191505060405180910390fd5b6000611ece83600a61306b565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2057600080fd5b505afa158015611f34573d6000803e3d6000fd5b505050506040513d6020811015611f4a57600080fd5b50516003546001600160a01b0391821691633ddac9539116611f6c878661401f565b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015611fb057600080fd5b505afa158015611fc4573d6000803e3d6000fd5b505050506040513d6020811015611fda57600080fd5b5051600254604080516305c0584560e41b81523060048201526024810184905290519293506001600160a01b0390911691635c0584509160448082019260009290919082900301818387803b15801561203257600080fd5b505af1158015612046573d6000803e3d6000fd5b5050505061206681612061848761401f90919063ffffffff16565b61314f565b5060035460408051630852cd8d60e31b81526004810187905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b1580156120b457600080fd5b505af11580156120c8573d6000803e3d6000fd5b505060006009555050600e5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b15801561211657600080fd5b505afa15801561212a573d6000803e3d6000fd5b505050506040513d602081101561214057600080fd5b5051600b556003546040805163a9059cbb60e01b81523360048201526024810185905290516001600160a01b039092169163a9059cbb916044808201926020929091908290030181600087803b15801561219957600080fd5b505af11580156121ad573d6000803e3d6000fd5b505050506040513d60208110156121c357600080fd5b50516112d75760405162461bcd60e51b8152600401808060200182810382526034815260200180614d486034913960400191505060405180910390fd5b6122086122c5565b612247576040805162461bcd60e51b815260206004820152601e6024820152600080516020614c5c833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065490565b6012546001600160a01b03166000818152601160205260409020549091565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b60006106196122e3614079565b6012546001600160a01b03166000908152601160205260409020546141bb565b601054600160a81b900460ff1615612354576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff16156123a6576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6123ae61053b565b6123e95760405162461bcd60e51b8152600401808060200182810382526043815260200180614b716043913960600191505060405180910390fd5b600f54156124285760405162461bcd60e51b8152600401808060200182810382526042815260200180614d7c6042913960600191505060405180910390fd5b600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561247657600080fd5b505afa15801561248a573d6000803e3d6000fd5b505050506040513d60208110156124a057600080fd5b5051600f55601080546001600160a01b03191633179055600e5460408051632abf68dd60e11b8152905161252e926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b1580156124fd57600080fd5b505afa158015612511573d6000803e3d6000fd5b505050506040513d602081101561252757600080fd5b50516141d2565b600c55600a55600e5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b15801561257957600080fd5b505afa15801561258d573d6000803e3d6000fd5b505050506040513d60208110156125a357600080fd5b5051600b55565b600d5490565b601054600160a81b900460ff1615612601576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b6106cb81614364565b601054600090600160a81b900460ff161561265e576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b5060095490565b601054600160a81b900460ff16156126b6576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b601054600160a01b900460ff1615612708576040805162461bcd60e51b815260206004820152601060248201526f15985d5b1d081a5cc81cdb185cda195960821b604482015290519081900360640190fd5b6127106122c5565b61274f576040805162461bcd60e51b815260206004820152601e6024820152600080516020614c5c833981519152604482015290519081900360640190fd5b612757611340565b8111156127ab576040805162461bcd60e51b815260206004820152601a60248201527f437265646974206c696d69742069732065786861757374656420000000000000604482015290519081900360640190fd5b6002546001600160a01b031663f97c6e116127c46122b6565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561280b57600080fd5b505af115801561281f573d6000803e3d6000fd5b505060098054840190555050600e5460408051632abf68dd60e11b815290516001600160a01b039092169163557ed1ba91600480820192602092909190829003018186803b15801561287057600080fd5b505afa158015612884573d6000803e3d6000fd5b505050506040513d602081101561289a57600080fd5b5051600b8190556106cb906001908390611bdc565b601054600090600160a81b900460ff1615612903576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b600e5460408051632abf68dd60e11b81529051610619926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b15801561294957600080fd5b505afa15801561295d573d6000803e3d6000fd5b505050506040513d602081101561297357600080fd5b5051614431565b6129826122c5565b6129c1576040805162461bcd60e51b815260206004820152601e6024820152600080516020614c5c833981519152604482015290519081900360640190fd5b6106cb81614495565b60025460408051632524697d60e11b815290516000926001600160a01b031691634a48d2fa916004808301926020929190829003018186803b158015612a0f57600080fd5b505afa158015612a23573d6000803e3d6000fd5b505050506040513d6020811015612a3957600080fd5b50516004805460085460408051633ddac95360e01b81526001600160a01b0393841694810194909452602484019190915251921691633ddac95391604480820192602092909190829003018186803b158015612a9457600080fd5b505afa158015612aa8573d6000803e3d6000fd5b505050506040513d6020811015612abe57600080fd5b5051905090565b6000610619600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1857600080fd5b505afa158015612b2c573d6000803e3d6000fd5b505050506040513d6020811015612b4257600080fd5b505160ff16600a0a611166600481612b586122d6565b600654906130b4565b6000600f546000141580156106195750600f54600e5460408051632abf68dd60e11b815290516202bf2093926001600160a01b03169163557ed1ba916004808301926020929190829003018186803b158015612bbc57600080fd5b505afa158015612bd0573d6000803e3d6000fd5b505050506040513d6020811015612be657600080fd5b5051031015905090565b601054600090600160a81b900460ff1615612c44576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b612c59612c5083614431565b6009549061401f565b92915050565b6001600160a01b0382163014612d4857600354604080516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015612ccb57600080fd5b505af1158015612cdf573d6000803e3d6000fd5b505050506040513d6020811015612cf557600080fd5b5051612d48576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a2063616e6e6f74207472616e73666572204541552e0000000000604482015290519081900360640190fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612d9257600080fd5b505afa158015612da6573d6000803e3d6000fd5b505050506040513d6020811015612dbc57600080fd5b50511015612dfb5760405162461bcd60e51b8152600401808060200182810382526027815260200180614f066027913960400191505060405180910390fd5b612e80600082600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e4f57600080fd5b505afa158015612e63573d6000803e3d6000fd5b505050506040513d6020811015612e7957600080fd5b5051611bdc565b6000612e8b82614503565b90506000600954821115612ead57506009805460009091559081900390612eb9565b50600980548290039055805b60035460408051630852cd8d60e31b81526004810184905290516001600160a01b03909216916342966c689160248082019260009290919082900301818387803b158015612f0657600080fd5b505af1158015612f1a573d6000803e3d6000fd5b50506005546040805163313ce56760e01b81529051612fad945060049350611166926001600160a01b03169163313ce56791818601916020919081900387018186803b158015612f6957600080fd5b505afa158015612f7d573d6000803e3d6000fd5b505050506040513d6020811015612f9357600080fd5b505160075460065460ff909216600a0a91611166916130b4565b600a54600954612fbc9161401f565b11612fcc576000600c819055600f555b6000612fd66122d6565b90508060075414612fe75760078190555b600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561303557600080fd5b505afa158015613049573d6000803e3d6000fd5b505050506040513d602081101561305f57600080fd5b5051600b555050505050565b60006130ad83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506145a5565b9392505050565b6000826130c357506000612c59565b828202828482816130d057fe5b04146130ad5760405162461bcd60e51b8152600401808060200182810382526021815260200180614e3a6021913960400191505060405180910390fd5b60006130ad83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614647565b600480546002546040805163824150d560e01b815290516000946001600160a01b039485169463095ea7b394169263824150d59281830192602092829003018186803b15801561319e57600080fd5b505afa1580156131b2573d6000803e3d6000fd5b505050506040513d60208110156131c857600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018790525160448083019260209291908290030181600087803b15801561321857600080fd5b505af115801561322c573d6000803e3d6000fd5b505050506040513d602081101561324257600080fd5b50506040805160028082526060808301845292602083019080368337505060045482519293506001600160a01b03169183915060009061327e57fe5b6001600160a01b0392831660209182029290920101526003548251911690829060019081106132a957fe5b6001600160a01b03928316602091820292909201810191909152600e5460408051632abf68dd60e11b81529051600094929092169263557ed1ba92600480840193829003018186803b1580156132fe57600080fd5b505afa158015613312573d6000803e3d6000fd5b505050506040513d602081101561332857600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b15801561337a57600080fd5b505afa15801561338e573d6000803e3d6000fd5b505050506040513d60208110156133a457600080fd5b5051604051634401edf760e11b8152600481018781526024820189905230606483018190526084830186905260a060448401908152875160a485015287516001600160a01b0390951694638803dbee948b948d948b9490938b9360c401906020878101910280838360005b8381101561342757818101518382015260200161340f565b505050509050019650505050505050600060405180830381600087803b15801561345057600080fd5b505af1158015613464573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561348d57600080fd5b8101908080516040519392919084600160201b8211156134ac57600080fd5b9083019060208201858111156134c157600080fd5b82518660208202830111600160201b821117156134dd57600080fd5b82525081516020918201928201910280838360005b8381101561350a5781810151838201526020016134f2565b50505050905001604052505050905060008160008151811061352857fe5b602002602001015190508160018151811061353f57fe5b60200260200101519450868111156135885760405162461bcd60e51b8152600401808060200182810382526032815260200180614cc96032913960400191505060405180910390fd5b8585146135c65760405162461bcd60e51b815260040180806020018281038252603a815260200180614fd9603a913960400191505060405180910390fd5b5050505092915050565b60006135dd82600261306b565b6003546002546040805163824150d560e01b815290519394506001600160a01b039283169363095ea7b3939092169163824150d591600480820192602092909190829003018186803b15801561363257600080fd5b505afa158015613646573d6000803e3d6000fd5b505050506040513d602081101561365c57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b1580156136ac57600080fd5b505af11580156136c0573d6000803e3d6000fd5b505050506040513d60208110156136d657600080fd5b50600090506136e4826146a1565b6004805460408051630852cd8d60e31b8152928301849052519293506001600160a01b0316916342966c689160248082019260009290919082900301818387803b15801561373157600080fd5b505af1158015613745573d6000803e3d6000fd5b50506003546001600160a01b031691506391c05b0b9050613766858561310d565b6040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561379c57600080fd5b505af11580156137b0573d6000803e3d6000fd5b505050506040513d60208110156137c657600080fd5b5050505050565b600554604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561381857600080fd5b505afa15801561382c573d6000803e3d6000fd5b505050506040513d602081101561384257600080fd5b50518311156138825760405162461bcd60e51b815260040180806020018281038252602781526020018061511f6027913960400191505060405180910390fd5b600061388c6122d6565b9050600081116138cd5760405162461bcd60e51b815260040180806020018281038252602f815260200180614c0b602f913960400191505060405180910390fd5b6012546001600160a01b03163314806138ff57506012546001600160a01b031660009081526011602052604090205481115b61393a5760405162461bcd60e51b815260040180806020018281038252604d815260200180615013604d913960600191505060405180910390fd5b8281111561398f576040805162461bcd60e51b815260206004820152601b60248201527f5661756c743a3a62757928293a20507269636520746f6f206c6f770000000000604482015290519081900360640190fd5b6000613a1e600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156139e257600080fd5b505afa1580156139f6573d6000803e3d6000fd5b505050506040513d6020811015613a0c57600080fd5b505160ff16600a0a61116687856130b4565b9050600f54600014613ef8576000613a3782600a61306b565b90506001600160a01b0387163014613b0c57600354604080516323b872dd60e01b81526001600160a01b038a8116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015613aa557600080fd5b505af1158015613ab9573d6000803e3d6000fd5b505050506040513d6020811015613acf57600080fd5b5051613b0c5760405162461bcd60e51b8152600401808060200182810382526028815260200180614c7c6028913960400191505060405180910390fd5b600354604080516370a0823160e01b8152306004820152905183926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015613b5657600080fd5b505afa158015613b6a573d6000803e3d6000fd5b505050506040513d6020811015613b8057600080fd5b50511015613bbf5760405162461bcd60e51b8152600401808060200182810382526025815260200180614ca46025913960400191505060405180910390fd5b6003546002546040805163824150d560e01b815290516001600160a01b039384169363095ea7b393169163824150d5916004808301926020929190829003018186803b158015613c0e57600080fd5b505afa158015613c22573d6000803e3d6000fd5b505050506040513d6020811015613c3857600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482018590525160448083019260209291908290030181600087803b158015613c8857600080fd5b505af1158015613c9c573d6000803e3d6000fd5b505050506040513d6020811015613cb257600080fd5b5060009050613cc0826146a1565b90506000613cd460646111668460216130b4565b600480546010546040805163a9059cbb60e01b81526001600160a01b03928316948101949094526024840185905251939450169163a9059cbb916044808201926020929091908290030181600087803b158015613d3057600080fd5b505af1158015613d44573d6000803e3d6000fd5b505050506040513d6020811015613d5a57600080fd5b5051613d975760405162461bcd60e51b815260040180806020018281038252602d815260200180614de8602d913960400191505060405180910390fd5b6000613da960646111668560216130b4565b600480546040805163a9059cbb60e01b81526001600160a01b038c81169482019490945260248101859052905193945091169163a9059cbb916044808201926020929091908290030181600087803b158015613e0457600080fd5b505af1158015613e18573d6000803e3d6000fd5b505050506040513d6020811015613e2e57600080fd5b5051613e6b5760405162461bcd60e51b815260040180806020018281038252602a815260200180615146602a913960400191505060405180910390fd5b6004546001600160a01b03166342966c68613e9083613e8a878761310d565b9061310d565b6040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613ec657600080fd5b505af1158015613eda573d6000803e3d6000fd5b50505050613ef1848661310d90919063ffffffff16565b9450505050505b613f028682612c5f565b6005546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018990529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015613f5857600080fd5b505af1158015613f6c573d6000803e3d6000fd5b505050506040513d6020811015613f8257600080fd5b5051613fbf5760405162461bcd60e51b8152600401808060200182810382526027815260200180614d216027913960400191505060405180910390fd5b6006805486900390556007548214613fd75760078290555b6040805186815290516001600160a01b0385169184917f9d995b79e708615dc7201d66ebdcb94d773fe76aac960305383a8b4f8dda9f059181900360200190a3505050505050565b6000828201838110156130ad576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600754600f5461070890156141b757600f54600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156140d957600080fd5b505afa1580156140ed573d6000803e3d6000fd5b505050506040513d602081101561410357600080fd5b505110156141425760405162461bcd60e51b8152600401808060200182810382526044815260200180614f636044913960600191505060405180910390fd5b600061419c82611166600f54600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561176857600080fd5b6065900690506141b36064611166858483036130b4565b9250505b5090565b6000818310156141cb57816130ad565b5090919050565b600080600b5483101561422c576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f742063616c63756c6174652066656520696e207468652070617374604482015290519081900360640190fd5b600f54839015801590614240575083600f54105b1561424a5750600f545b62015180600061425f620186a061016d61306b565b9050600c549350600a5494506000600b5490505b8381101561435b5760006143146004611166600560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156142d357600080fd5b505afa1580156142e7573d6000803e3d6000fd5b505050506040513d60208110156142fd57600080fd5b505160075460065460ff90921691611166916130b4565b90508061432c8860095461401f90919063ffffffff16565b111561433b578561433b578195505b620f4240838860095401028161434d57fe5b049690960195508201614273565b50505050915091565b60048054604080516323b872dd60e01b8152339381019390935230602484015260448301849052516001600160a01b03909116916323b872dd9160648083019260209291908290030181600087803b1580156143bf57600080fd5b505af11580156143d3573d6000803e3d6000fd5b505050506040513d60208110156143e957600080fd5b50516144265760405162461bcd60e51b8152600401808060200182810382526023815260200180614e876023913960400191505060405180910390fd5b600880549091019055565b601054600090600160a81b900460ff1615614485576040805162461bcd60e51b815260206004820152600f60248201526e15985d5b1d081a5cc818db1bdcd959608a1b604482015290519081900360640190fd5b61448e826141d2565b5092915050565b6001600160a01b0381166144a857600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000614559600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fd57600080fd5b600c819055859450909250905060008284111561458157506000600a5591819003918161458c565b50828203600a556000925b600d80548201905561459d816135d0565b505050919050565b600081836146315760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156145f65781810151838201526020016145de565b50505050905090810190601f1680156146235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161463d57fe5b0495945050505050565b600081848411156146995760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156145f65781810151838201526020016145de565b505050900390565b6040805160028082526060808301845260009390929190602083019080368337505060035482519293506001600160a01b0316918391506000906146e157fe5b6001600160a01b03928316602091820292909201015260045482519116908290600190811061470c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000614838600a6111666009600260009054906101000a90046001600160a01b03166001600160a01b0316634a48d2fa6040518163ffffffff1660e01b815260040160206040518083038186803b15801561478657600080fd5b505afa15801561479a573d6000803e3d6000fd5b505050506040513d60208110156147b057600080fd5b505160035460408051633ddac95360e01b81526001600160a01b039283166004820152602481018c905290519190921691633ddac953916044808301926020929190829003018186803b15801561480657600080fd5b505afa15801561481a573d6000803e3d6000fd5b505050506040513d602081101561483057600080fd5b5051906130b4565b90506000600e60009054906101000a90046001600160a01b03166001600160a01b031663557ed1ba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561488a57600080fd5b505afa15801561489e573d6000803e3d6000fd5b505050506040513d60208110156148b457600080fd5b50516002546040805163824150d560e01b8152905161271090930193506060926001600160a01b039092169163824150d591600480820192602092909190829003018186803b15801561490657600080fd5b505afa15801561491a573d6000803e3d6000fd5b505050506040513d602081101561493057600080fd5b50516040516338ed173960e01b8152600481018881526024820186905230606483018190526084830186905260a060448401908152885160a485015288516001600160a01b03909516946338ed1739948c948a948c9490938b9360c401906020878101910280838360005b838110156149b357818101518382015260200161499b565b505050509050019650505050505050600060405180830381600087803b1580156149dc57600080fd5b505af11580156149f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015614a1957600080fd5b8101908080516040519392919084600160201b821115614a3857600080fd5b908301906020820185811115614a4d57600080fd5b82518660208202830111600160201b82111715614a6957600080fd5b82525081516020918201928201910280838360005b83811015614a96578181015183820152602001614a7e565b50505050905001604052505050905080600181518110614ab257fe5b6020026020010151945080600081518110614ac957fe5b60200260200101518614614b0e5760405162461bcd60e51b815260040180806020018281038252603a815260200180615060603a913960400191505060405180910390fd5b84831115614b4d5760405162461bcd60e51b815260040180806020018281038252603381526020018061509a6033913960400191505060405180910390fd5b50505050919050565b60405180604001604052806000815260200160008152509056fe5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20637265646974206c696d6974206973206e6f742062726561636865645661756c743a3a736c61736828293a2070617920736c617368696e6720626f756e7479206572726f725661756c743a6368616c6c656e67653a206c6f636b20616d6f756e7420696e20454155206e6f7420656e6f7567685661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665725661756c743a6368616c6c656e67653a2070726963652063616e6e6f7420626520304f6e6c79206f776e657220697320616c6c6f77656420746f20646f20697400005661756c743a3a6275793a2063616e6e6f74207472616e73666572204541552070656e616c74792e5661756c743a6275793a204e6f7420656e6f7567682045415520666f722070656e616c74795661756c743a3a73656c6c434c474e28293a20434c474e20736f6c64206973206d6f7265207468616e206578706563746564436f7665722073686f727466616c6c3a206e6f2073686f727466616c6c20746f20636f7665725661756c743a3a6275793a2063616e6e6f74207472616e73666572205573657220546f6b656e2e5661756c743a3a636f76657253686f727466616c6c28293a2063616e6e6f74207472616e736665722045415520626f756e74792e5661756c743a3a7374617274496e697469616c4c697175696469747941756374696f6e28293a20636c6f73652d6f757420616c726561647920696e697469617465645661756c743a3a736c61736828293a2070617920636c6f7365206f757420626f756e7479206572726f725661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20696e69746961746f725661756c743a6368616c6c656e67653a2063616e6e6f74207472616e73666572204541552e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775661756c743a72656465656d4368616c6c656e676528293a2063616e6e6f74207472616e73666572204541555661756c743a3a7374616b653a2063616e6e6f74207472616e7366657220436c474e2e4f6e6c7920434c474e20686f6c6465722077697468206174206c65617374203525206f662072656d61696e696e67206f75747374616e64696e672045415520646562742063616e20696e697469617465206120434c474e206d696e745661756c743a7061794f66663a204e6f7420656e6f7567682045415520746f20706179206f66665661756c743a3a636c6f736528293a20636c6f736520616c6c6f776564206f6e6c7920696620646562742069732070616964206f66665661756c743a3a676574507269636528293a20496e636f72726563742073746174653a204c696d697420697320627265616368656420696e207468652066757475726521436f7665722073686f727466616c6c3a2063616e2062652063616c6c6564206f6e6c7920616674657220736c617368696e675661756c743a3a73656c6c434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520626f7567687420666f7220434c474e5661756c743a3a62757928293a20496e697469616c204c69717569646974792041756374696f6e206973206f7665722e204f6e6c79206368616c6c656e6765722063616e20627579206f75742e5661756c743a3a627579434c474e28293a206e6f7420657861637420616d6f756e74206f662045415520736f6c6420746f2062757920434c474e5661756c743a3a627579434c474e28293a20434c474e20626f75676874206973206c657373207468616e206578706563746564536c617368696e673a20546f6f206d616e792045415520676f742066726f6d20736c617368696e675661756c743a20696e697469616c2061756374696f6e206973206e6f742066696e6973686564207965745661756c743a3a62757928293a204e6f7420656e6f75676820746f6b656e7320746f2073656c6c5661756c743a3a6275793a207472616e7366657220434c474e20626f756e747920746f20626964646572a2646970667358221220bdb3aff066080d456719dac9b790782b76906dd1ab2ebc6e1235f8333cd048ab64736f6c63430007000033";

    public static final String FUNC_BORROW = "borrow";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CANBORROW = "canBorrow";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_CLOSE = "close";

    public static final String FUNC_COVERSHORTFALL = "coverShortfall";

    public static final String FUNC_GETCHALLENGELOCKED = "getChallengeLocked";

    public static final String FUNC_GETCHALLENGEWINNER = "getChallengeWinner";

    public static final String FUNC_GETCOLLATERALINEAU = "getCollateralInEau";

    public static final String FUNC_GETCREDITLIMIT = "getCreditLimit";

    public static final String FUNC_GETFEES = "getFees";

    public static final String FUNC_GETPRICE = "getPrice";

    public static final String FUNC_GETPRINCIPAL = "getPrincipal";

    public static final String FUNC_GETREDEEMABLECHALLENGE = "getRedeemableChallenge";

    public static final String FUNC_GETSTATE = "getState";

    public static final String FUNC_GETTOKENAMOUNT = "getTokenAmount";

    public static final String FUNC_GETTOTALDEBT = "getTotalDebt";

    public static final String FUNC_GETTOTALFEESREPAID = "getTotalFeesRepaid";

    public static final String FUNC_ISLIMITBREACHED = "isLimitBreached";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYOFF = "payOff";

    public static final String FUNC_REDEEMCHALLENGE = "redeemChallenge";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SLASH = "slash";

    public static final String FUNC_STAKE = "stake";

    public static final String FUNC_STARTINITIALLIQUIDITYAUCTION = "startInitialLiquidityAuction";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PURCHASE_EVENT = new Event("Purchase", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Vault(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PurchaseEventResponse> getPurchaseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASE_EVENT, transactionReceipt);
        ArrayList<PurchaseEventResponse> responses = new ArrayList<PurchaseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchaseEventResponse typedResponse = new PurchaseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchaseEventResponse>() {
            @Override
            public PurchaseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASE_EVENT, log);
                PurchaseEventResponse typedResponse = new PurchaseEventResponse();
                typedResponse.log = log;
                typedResponse.price = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchaseEventResponse> purchaseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASE_EVENT));
        return purchaseEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> borrow(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger amount, BigInteger maxPrice, String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(maxPrice), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> canBorrow() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CANBORROW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(BigInteger price, BigInteger eauToLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.generated.Uint256(eauToLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> close() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLOSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> coverShortfall() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COVERSHORTFALL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getChallengeLocked(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGELOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getChallengeWinner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHALLENGEWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getCollateralInEau() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCOLLATERALINEAU, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getCreditLimit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCREDITLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFees() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFEES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrice() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getPrincipal() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPRINCIPAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getRedeemableChallenge(String challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREDEEMABLECHALLENGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, challenger)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getState() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSTATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTokenAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalDebt() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALDEBT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalFeesRepaid() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALFEESREPAID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isLimitBreached() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISLIMITBREACHED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payOff(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAYOFF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemChallenge() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEMCHALLENGE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> slash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SLASH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> stake(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startInitialLiquidityAuction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STARTINITIALLIQUIDITYAUCTION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Vault(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Vault load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Vault load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Vault(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Vault> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String owner, String token, BigInteger initialAmount, BigInteger tokenPrice, String timeProvider) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(initialAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenPrice), 
                new org.web3j.abi.datatypes.Address(160, timeProvider)));
        return deployRemoteCall(Vault.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PurchaseEventResponse extends BaseEventResponse {
        public BigInteger price;

        public String to;

        public BigInteger amount;
    }
}
